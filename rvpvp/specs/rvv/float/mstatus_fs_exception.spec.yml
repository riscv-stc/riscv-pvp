_: &vs_off_only
  env: RVTEST_RV64UV
  head: | 
    #define MSTATUS_VS 0x0600
    #define MSTATUS_FS 0x6000
    #undef  EXTRA_INIT
    #define EXTRA_INIT                              \
      /* Set up mstatus VS and mstatus FS  */       \
      li a0, 1;                                     \
      vsetvli t0, a0, e32,m1,ta,ma;                 \
      li t0, (MSTATUS_VS & (MSTATUS_VS >> 2)) |     \
             (MSTATUS_FS & (MSTATUS_FS >> 1));      \  
      csrw mstatus, t0;   
    #include "exception.h"
    #include "test_macros_v.h"    
  rule: co_verification                     
  templates:
    test_exception_mstatus_FS_vs_off_instruction_vv: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.vv v24, v16, v8;
        j fail;
      test_{num}_end:
    
    test_exception_mstatus_FS_vs_off_instruction_vf: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.vf v24, v16, fa1;
        j fail;
      test_{num}_end:
    
    test_exception_mstatus_FS_vs_off_instruction_vf2: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.vf v24, fa1, v16;
        j fail;
      test_{num}_end:        

    test_exception_mstatus_FS_vs_off_instruction_vX: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.{suffix} v24, v16, {s1};
        j fail;
      test_{num}_end:   
      
    test_exception_mstatus_FS_vs_off_instruction_vfmerge: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.vfm v24, v16, fa1, v0;
        j fail;
      test_{num}_end:   

    test_exception_mstatus_FS_vs_off_instruction_vfmv: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.{fix1}.{fix2} {dst}, {s1};
        j fail;
      test_{num}_end: 

    test_exception_mstatus_FS_vs_off_instruction_vfcvt: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.{fix1}.{fix2}.{fix3} v24, v16;
        j fail;
      test_{num}_end:  

    test_exception_mstatus_FS_vs_off_instruction_vfcvt_rtz: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.{fix1}.{fix2}.{fix3}.{fix4} v24, v16;
        j fail;
      test_{num}_end:             

vnull_fs: 
  <<: *vs_off_only
  cases:
    test_exception_mstatus_FS_vs_off_instruction_vv @ instruction:
      - '[ "vfadd" ]'
      - '[ "vfsub" ]'
      - '[ "vfwadd" ]'
      - '[ "vfwsub" ]'
      - '[ "vfmul" ]'
      - '[ "vfdiv" ]'
      - '[ "vfwmul" ]'
      - '[ "vfmacc" ]'
      - '[ "vfnmacc" ]'
      - '[ "vfmsac" ]'
      - '[ "vfnmsac" ]'
      - '[ "vfmadd" ]'
      - '[ "vfnmadd" ]'
      - '[ "vfmsub" ]'
      - '[ "vfnmsub" ]'
      - '[ "vfwmacc" ]'
      - '[ "vfwnmacc" ]'
      - '[ "vfwmsac" ]'
      - '[ "vfwnmsac" ]'
      - '[ "vfmin" ]'
      - '[ "vfmax" ]'
      - '[ "vfsgnj" ]'
      - '[ "vfsgnjn" ]'
      - '[ "vfsgnjx" ]'
      - '[ "vmfeq" ]'
      - '[ "vmfne" ]'
      - '[ "vmflt" ]'
      - '[ "vmfle" ]'
      - '[ "vmfgt" ]'
      - '[ "vmfge" ]'

    test_exception_mstatus_FS_vs_off_instruction_vf @ instruction:
      - '[ "vfadd" ]'
      - '[ "vfsub" ]'
      - '[ "vfrsub" ]'
      - '[ "vfwadd" ]'
      - '[ "vfwsub" ]'
      - '[ "vfmul" ]'
      - '[ "vfdiv" ]'
      - '[ "vfrdiv" ]'
      - '[ "vfwmul" ]'
      - '[ "vfmin" ]'
      - '[ "vfmax" ]'
      - '[ "vfsgnj" ]'
      - '[ "vfsgnjn" ]'
      - '[ "vfsgnjx" ]'
      - '[ "vmfeq" ]'
      - '[ "vmfne" ]'
      - '[ "vmflt" ]'
      - '[ "vmfle" ]'
      - '[ "vmfgt" ]'
      - '[ "vmfge" ]'
      - '[ "vfslide1up" ]'
      - '[ "vfslide1down" ]'
    
    test_exception_mstatus_FS_vs_off_instruction_vf2 @ instruction:
      - '[ "vfmacc" ]'
      - '[ "vfnmacc" ]'
      - '[ "vfmsac" ]'
      - '[ "vfnmsac" ]'
      - '[ "vfmadd" ]'
      - '[ "vfnmadd" ]'
      - '[ "vfmsub" ]'
      - '[ "vfnmsub" ]'
      - '[ "vfwmacc" ]'
      - '[ "vfwnmacc" ]'
      - '[ "vfwmsac" ]'
      - '[ "vfwnmsac" ]'

    test_exception_mstatus_FS_vs_off_instruction_vX @ instruction, suffix, s1:
      - '[ "vfwadd", "wv", "v8" ]'
      - '[ "vfwadd", "wf", "fa1" ]'
      - '[ "vfwsub", "wv", "v8" ]'
      - '[ "vfwsub", "wf", "fa1" ]'
      - '[ "vfsqrt",  "v", "v0.t" ]'
      - '[ "vfrsqrt7","v", "v0.t" ]'
      - '[ "vfrec7",  "v", "v0.t" ]'
      - '[ "vfclass", "v", "v0.t" ]'
      - '[ "vfredosum", "vs", "v8" ]'
      - '[ "vfredsum",  "vs", "v8" ]'
      - '[ "vfredmax",  "vs", "v8" ]'
      - '[ "vfredmin",  "vs", "v8" ]'
      - '[ "vfwredosum","vs", "v8" ]'
      - '[ "vfwredsum", "vs", "v8" ]'

    test_exception_mstatus_FS_vs_off_instruction_vfmerge @ instruction:
      - '[ "vfmerge" ]'

    test_exception_mstatus_FS_vs_off_instruction_vfmv @ instruction, fix1, fix2, dst, s1:
      - '[ "vfmv", "v", "f", "v8", "fa1" ]'  
      - '[ "vfmv", "f", "s", "fa1","v8" ]' 
      - '[ "vfmv", "s", "f", "v8", "fa1" ]' 

    test_exception_mstatus_FS_vs_off_instruction_vfcvt @ instruction, fix1, fix2, fix3:
      - '[ "vfcvt", "xu", "f", "v" ]'
      - '[ "vfcvt", "x",  "f", "v" ]'
      - '[ "vfcvt", "f",  "xu","v" ]'
      - '[ "vfcvt", "f",  "x", "v" ]'
      - '[ "vfwcvt", "xu","f", "v" ]'
      - '[ "vfwcvt", "x", "f", "v" ]'
      - '[ "vfwcvt", "f", "xu","v" ]'
      - '[ "vfwcvt", "f", "x", "v" ]'
      - '[ "vfwcvt", "f", "f", "v" ]'
      - '[ "vfncvt", "xu","f", "w" ]'
      - '[ "vfncvt", "x", "f", "w" ]'
      - '[ "vfncvt", "f", "xu","w" ]'
      - '[ "vfncvt", "f", "x", "w" ]'
      - '[ "vfncvt", "f", "f", "w" ]'

    test_exception_mstatus_FS_vs_off_instruction_vfcvt_rtz @ instruction, fix1, fix2, fix3, fix4:
      - '[ "vfcvt",  "rtz", "xu", "f", "v" ]'
      - '[ "vfcvt",  "rtz", "x",  "f", "v" ]'
      - '[ "vfwcvt", "rtz", "xu", "f", "v" ]'
      - '[ "vfwcvt", "rtz", "x",  "f", "v" ]'      
      - '[ "vfncvt", "rtz", "xu", "f", "w" ]'
      - '[ "vfncvt", "rtz", "x",  "f", "w" ]'
      - '[ "vfncvt", "rod", "f",  "f", "w" ]'


_: &fs_off_only
  env: RVTEST_RV64UV
  head: | 
    #define MSTATUS_VS 0x0600
    #define MSTATUS_FS 0x6000
    #undef  EXTRA_INIT
    #define EXTRA_INIT                              \
      /* Set up mstatus VS and mstatus FS  */       \
      li a0, 1;                                     \
      vsetvli t0, a0, e32,m1,ta,ma;                 \
      li t0, (MSTATUS_VS & (MSTATUS_VS >> 1)) |     \
             (MSTATUS_FS & (MSTATUS_FS >> 2));      \  
      csrw mstatus, t0;   
    #include "exception.h"
    #include "test_macros_v.h"    
  rule: co_verification                           
  templates:
    test_exception_mstatus_FS_fs_off_assess_freg: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction} {freg}, (a0);
        j fail;
      test_{num}_end:
  
    test_exception_mstatus_FS_fs_off_assess_CSRs: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction} {reg}, {fcsr};
        j fail;
      test_{num}_end:

    test_exception_mstatus_FS_fs_off_instruction_vv: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.vv v24, v16, v8;
        j fail;
      test_{num}_end:
    
    test_exception_mstatus_FS_fs_off_instruction_vf: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.vf v24, v16, fa1;
        j fail;
      test_{num}_end:
    
    test_exception_mstatus_FS_fs_off_instruction_vf2: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.vf v24, fa1, v16;
        j fail;
      test_{num}_end:        

    test_exception_mstatus_FS_fs_off_instruction_vX: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.{suffix} v24, v16, {s1};
        j fail;
      test_{num}_end:   
      
    test_exception_mstatus_FS_fs_off_instruction_vfmerge: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.vfm v24, v16, fa1, v0;
        j fail;
      test_{num}_end:   

    test_exception_mstatus_FS_fs_off_instruction_vfmv: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.{fix1}.{fix2} {dst}, {s1};
        j fail;
      test_{num}_end: 

    test_exception_mstatus_FS_fs_off_instruction_vfcvt: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.{fix1}.{fix2}.{fix3} v24, v16;
        j fail;
      test_{num}_end:  

    test_exception_mstatus_FS_fs_off_instruction_vfcvt_rtz: |
      test_{num}: 
        li TESTNUM, {num};   
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);             
        {instruction}.{fix1}.{fix2}.{fix3}.{fix4} v24, v16;
        j fail;
      test_{num}_end:             

vnull_fs2: 
  <<: *fs_off_only
  cases:
    test_exception_mstatus_FS_fs_off_assess_freg @ instruction, freg:
      - '[ "flw", "f0" ]'
      - '[ "flw", "fa0" ]'
      - '[ "flw", "f31" ]'  
      - '[ "fsw", "f0" ]'
      - '[ "fsw", "fa0" ]'
      - '[ "fsw", "f31" ]'     

    test_exception_mstatus_FS_fs_off_assess_CSRs @ instruction, reg, fcsr:
      - '[ "csrr", "a0",   "fcsr" ]'
      - '[ "csrw", "fcsr", "a0" ]'

    test_exception_mstatus_FS_fs_off_instruction_vv @ instruction:
      - '[ "vfadd" ]'
      - '[ "vfsub" ]'
      - '[ "vfwadd" ]'
      - '[ "vfwsub" ]'
      - '[ "vfmul" ]'
      - '[ "vfdiv" ]'
      - '[ "vfwmul" ]'
      - '[ "vfmacc" ]'
      - '[ "vfnmacc" ]'
      - '[ "vfmsac" ]'
      - '[ "vfnmsac" ]'
      - '[ "vfmadd" ]'
      - '[ "vfnmadd" ]'
      - '[ "vfmsub" ]'
      - '[ "vfnmsub" ]'
      - '[ "vfwmacc" ]'
      - '[ "vfwnmacc" ]'
      - '[ "vfwmsac" ]'
      - '[ "vfwnmsac" ]'
      - '[ "vfmin" ]'
      - '[ "vfmax" ]'
      - '[ "vfsgnj" ]'
      - '[ "vfsgnjn" ]'
      - '[ "vfsgnjx" ]'
      - '[ "vmfeq" ]'
      - '[ "vmfne" ]'
      - '[ "vmflt" ]'
      - '[ "vmfle" ]'
      - '[ "vmfgt" ]'
      - '[ "vmfge" ]'

    test_exception_mstatus_FS_fs_off_instruction_vf @ instruction:
      - '[ "vfadd" ]'
      - '[ "vfsub" ]'
      - '[ "vfrsub" ]'
      - '[ "vfwadd" ]'
      - '[ "vfwsub" ]'
      - '[ "vfmul" ]'
      - '[ "vfdiv" ]'
      - '[ "vfrdiv" ]'
      - '[ "vfwmul" ]'
      - '[ "vfmin" ]'
      - '[ "vfmax" ]'
      - '[ "vfsgnj" ]'
      - '[ "vfsgnjn" ]'
      - '[ "vfsgnjx" ]'
      - '[ "vmfeq" ]'
      - '[ "vmfne" ]'
      - '[ "vmflt" ]'
      - '[ "vmfle" ]'
      - '[ "vmfgt" ]'
      - '[ "vmfge" ]'
      - '[ "vfslide1up" ]'
      - '[ "vfslide1down" ]'
    
    test_exception_mstatus_FS_fs_off_instruction_vf2 @ instruction:
      - '[ "vfmacc" ]'
      - '[ "vfnmacc" ]'
      - '[ "vfmsac" ]'
      - '[ "vfnmsac" ]'
      - '[ "vfmadd" ]'
      - '[ "vfnmadd" ]'
      - '[ "vfmsub" ]'
      - '[ "vfnmsub" ]'
      - '[ "vfwmacc" ]'
      - '[ "vfwnmacc" ]'
      - '[ "vfwmsac" ]'
      - '[ "vfwnmsac" ]'

    test_exception_mstatus_FS_fs_off_instruction_vX @ instruction, suffix, s1:
      - '[ "vfwadd", "wv", "v8" ]'
      - '[ "vfwadd", "wf", "fa1" ]'
      - '[ "vfwsub", "wv", "v8" ]'
      - '[ "vfwsub", "wf", "fa1" ]'
      - '[ "vfsqrt",  "v", "v0.t" ]'
      - '[ "vfrsqrt7","v", "v0.t" ]'
      - '[ "vfrec7",  "v", "v0.t" ]'
      - '[ "vfclass", "v", "v0.t" ]'
      - '[ "vfredosum", "vs", "v8" ]'
      - '[ "vfredsum",  "vs", "v8" ]'
      - '[ "vfredmax",  "vs", "v8" ]'
      - '[ "vfredmin",  "vs", "v8" ]'
      - '[ "vfwredosum","vs", "v8" ]'
      - '[ "vfwredsum", "vs", "v8" ]'

    test_exception_mstatus_FS_fs_off_instruction_vfmerge @ instruction:
      - '[ "vfmerge" ]'

    test_exception_mstatus_FS_fs_off_instruction_vfmv @ instruction, fix1, fix2, dst, s1:
      - '[ "vfmv", "v", "f", "v8", "fa1" ]'  
      - '[ "vfmv", "f", "s", "fa1","v8" ]' 
      - '[ "vfmv", "s", "f", "v8", "fa1" ]' 

    test_exception_mstatus_FS_fs_off_instruction_vfcvt @ instruction, fix1, fix2, fix3:
      - '[ "vfcvt", "xu", "f", "v" ]'
      - '[ "vfcvt", "x",  "f", "v" ]'
      - '[ "vfcvt", "f",  "xu","v" ]'
      - '[ "vfcvt", "f",  "x", "v" ]'
      - '[ "vfwcvt", "xu","f", "v" ]'
      - '[ "vfwcvt", "x", "f", "v" ]'
      - '[ "vfwcvt", "f", "xu","v" ]'
      - '[ "vfwcvt", "f", "x", "v" ]'
      - '[ "vfwcvt", "f", "f", "v" ]'
      - '[ "vfncvt", "xu","f", "w" ]'
      - '[ "vfncvt", "x", "f", "w" ]'
      - '[ "vfncvt", "f", "xu","w" ]'
      - '[ "vfncvt", "f", "x", "w" ]'
      - '[ "vfncvt", "f", "f", "w" ]'

    test_exception_mstatus_FS_fs_off_instruction_vfcvt_rtz @ instruction, fix1, fix2, fix3, fix4:
      - '[ "vfcvt",  "rtz", "xu", "f", "v" ]'
      - '[ "vfcvt",  "rtz", "x",  "f", "v" ]'
      - '[ "vfwcvt", "rtz", "xu", "f", "v" ]'
      - '[ "vfwcvt", "rtz", "x",  "f", "v" ]'      
      - '[ "vfncvt", "rtz", "xu", "f", "w" ]'
      - '[ "vfncvt", "rtz", "x",  "f", "w" ]'
      - '[ "vfncvt", "rod", "f",  "f", "w" ]'
