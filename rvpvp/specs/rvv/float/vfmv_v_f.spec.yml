_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  templates:
    test_basic: |
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, 4;
        fsrm t1, t0;         // set rounding mode as RMM
        li a0, {vl} ; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {rs1_data} ;  // rs1 data label
        {fldins} fa1, (a1) ; 
        li t0, 0;
        csrw vstart, t0;      // set vstart as 0
        {name} v24, fa1;  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        vse{sew}.v v24, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1;
        .balign  ({sew}/8)        
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;  // there are {vl} sets of ({sew}/8) bytes 0
        .popsection
   
    test_vta_eq_tu: |   
      test_{num}: 
        li TESTNUM, {num}; // {num} set automatically            
        li t0, 4;
        fsrm t1, t0;      //set rounding mode as RMM            
        li a0, {orig_shape[0]} ; // vl of source data = (vlmax, VLEN/SEW)
        vsetvli t0, a0, e{sew},m{lmul_orig},ta,ma;
        la a1, {rs1_data} ; // rs1 data label
        la a3, {orig_data}; // original data label of target register
        {fldins} fa1, (a1) ; 
        vle{sew}.v v24, (a3);
        li a0, {vl} ;       // set vl of test instruction
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        li t0, 0;
        csrw vstart, t0;    // set vstart as 0
        {name} v24, fa1 ; // {name} is the test instruction            
      1:li a0, {orig_shape[0]} ;
        vsetvli t0, a0, e{sew},m{lmul_orig},ta,ma;
        la a3, test_{num}_data; 
        vse{sew}.v v24, (a3);  // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({sew}/8)
      test_{num}_data:
        .fill {orig_shape[0]}, ({sew}/8), 0;// there are {orig_shape[0]} sets of ({sew}/8) bytes 0
        .popsection   
               
    test_vstart_not_eq_zero: |   
      test_{num}: 
        li TESTNUM, {num};   // {num} set automatically
        li t0, 4;
        fsrm t1, t0;         // set rounding mode as RMM
        li a0, {vl} ; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {rs1_data} ;  // rs1 data label
        la a3, {orig_data}; // original data label of target register
        {fldins} fa1, (a1) ;  
        vle{sew}.v v24, (a3);
        li t0, {vstart};
        csrw vstart, t0;      // set vstart
        {name} v24, fa1;  // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;          // test if vstart==0 after the instruction
        j fail;
      1:la a3, test_{num}_data; 
        vse{sew}.v v24, (a3);    // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign  ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;  // there are {vl} sets of ({sew}/8) bytes 0
        .popsection 

    test_exception_wrong_sew_without_mask: |
      test_{num}: 
        li TESTNUM, {num}; // {num} set automatically            
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);          
        li a0, {vl} ;     //vl
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, fa1; // {name} is the test instruction
        j fail;
      test_{num}_end:
    test_exception_lmul_vreg_no_without_mask: |
      test_{num}: 
        li TESTNUM, {num}; // {num} set automatically              
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);       
        li a0, {vl} ;     // vl
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} {vd_name}, fa1; // {name} is the test instruction
        j fail;
      test_{num}_end:
    test_exception_wrong_lmul_without_mask: |
      test_{num}: 
        li TESTNUM, {num}; // {num} set automatically            
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);          
        li a0, 1 ;     //vl
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, fa1; // {name} is the test instruction
        j fail;
      test_{num}_end: 
  rule: co_verification
  basic_cases:
    test_basic:
      matrix:
        sew : vector_sew_list_f(flen)
        lmul: vector_lmul_list(sew, flen)
        vl  : vector_vl_list(lmul, sew, vlen)
        rs1 : np.array([np.random.random()], dtype=bits_to_dtype_float(sew))
        fldins: fload_inst(sew)      

  cases:
    test_basic:
      matrix:
        sew : vector_sew_list_f(flen)
        lmul: vector_lmul_list(sew, flen)
        vl  : vector_vl_list(lmul, sew, vlen)
        rs1 : np.array([np.random.random()], dtype=bits_to_dtype_float(sew))
        fldins: fload_inst(sew)       

    test_vta_eq_tu:
      matrix:
        sew : vector_sew_list_f(flen)
        lmul: vector_lmul_list(sew, flen)
        lmul_orig: 1 if isinstance(lmul,str) else lmul
        vl  : list(np.random.choice( vector_vl_list(lmul, sew, vlen), 1))
        rs1 : np.array([np.random.random()], dtype=bits_to_dtype_float(sew))
        orig: np.linspace(-400, 400, vector_len_vreg_aligned(lmul, sew, vlen)).astype(bits_to_dtype_float(sew))  
        fldins: fload_inst(sew)        
     
      
    test_vstart_not_eq_zero:
      matrix:
        sew : vector_sew_list_f(flen)
        lmul: vector_lmul_list(sew, flen)
        vl  : np.random.randint(1, vector_vlmax(lmul, sew, vlen) + 1)
        rs1 : np.array([np.random.random()], dtype=bits_to_dtype_float(sew)) 
        orig:  np.linspace(-400, 400, int(vl)).astype(bits_to_dtype_float(sew))  
        vstart:   "list(np.random.choice(vl, 2)) + [ vector_vlmax(lmul, sew, vlen) + 1 ]"
        fldins: fload_inst(sew)   
  
    test_exception_wrong_sew_without_mask  @ sew, lmul, vl  :
      - [ 8, 1, 50 ]
      - [ 8, 4, 200 ] 
      - [ 8, "f2", 15 ]
      - [ 128, 1, 3 ]
      - [ 128, 2, 10 ]
      - [ 128, 4, 20 ]
      - [ 256, 1, 2 ]
      - [ 256, 4, 10 ]
      - [ 256, 8, 25 ]
      - [ 512, 2, 2 ]
      - [ 512, 4, 5 ]
      - [ 512, 8, 11 ]
      - [ 1024, 1, 1 ]
      - [ 1024, 4, 3 ]
      - [ 1024, 8, 5 ]
    test_exception_lmul_vreg_no_without_mask  @ sew, lmul, vl, vd_name:
      - [ 64, 2, 15, "v11" ]
      - [ 32, 4, 37, "v27" ]
      - [ 64, 8, 33, "v7" ]
    test_exception_wrong_lmul_without_mask:
      matrix:
        sew : vector_sew_list_f(flen)
        lmul: vector_illegal_lmul(sew)

  random_cases:
    test_vstart_not_eq_zero:
      matrix:
        sew : vector_sew_list_f(flen)
        lmul: 1
        vl  : np.random.randint(1, vector_vlmax(lmul, sew, vlen) + 1)
        rs1 : scalar_float_random(sew, 1)
        orig:  scalar_float_random(sew, vl) 
        vstart:   np.random.randint(0, vl)
        fldins: fload_inst(sew)   


  rule_params:
    test_basic: np.allclose( result, golden, rtol=1e-3, atol=1e-5, equal_nan=True)     
    test_vta_eq_tu: np.allclose( result, golden, rtol=1e-3, atol=1e-5, equal_nan=True) 
    test_vstart_not_eq_zero: np.allclose( result, golden, rtol=1e-3, atol=1e-5, equal_nan=True)
  



vfmv_v_f:
  <<: *default