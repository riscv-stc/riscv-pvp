_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a6, 0;
        csrw vxrm, a6;
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v   v8, (a1);
        vle{sew2}.v v16, (a2);
        vle{sew}.v  v24, (a3);
        {name} v24, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a6, 0;
        csrw vxrm, a6;
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,{vma};
        la a0, {mask_data};
        la a1, {vs1_data};
        la a2, {vs2_data};        
        la a6, {ori_data};
        vle1.v  v0, (a0);
        vle{sew}.v   v8, (a1);
        vle{sew2}.v v16, (a2);
        vle{sew}.v  v24, (a6);
        {name} v24, v16, v8, v0.t;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a3, test_{num}_data;
        vse{sew}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection  

    test_random_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a6, {vxrm}; //0
        csrw vxrm, a6;
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v   v8, (a1);
        vle{sew2}.v v16, (a2);
        vle{sew}.v  v24, (a3);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_agnostic_tu_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a6, 0;
        csrw vxrm, a6;
        li a0, {tuvl};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;
        la a1, {vs1_data};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v   v8, (a1);
        vle{sew2}.v v16, (a2);
        vle{sew}.v  v24, (a3);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        {name} v24, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {tuvl};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;
        la a6, test_{num}_data;
        vse{sew}.v v24, (a6);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({tuvl}), ({sew}/8), 0;
        .popsection 

    test_vstart_not_equal_zero_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a6, 0;
        csrw vxrm, a6;
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v   v8, (a1);
        vle{sew2}.v v16, (a2);
        vle{sew}.v  v24, (a3);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_vstart_not_equal_zero_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a6, 0;
        csrw vxrm, a6;
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data}; 
        la a3, {ori_data};   
        la a4, {mask_data};   
        vle{sew}.v   v8, (a1);
        vle{sew2}.v v16, (a2);
        vle{sew}.v  v24, (a3);
        vle1.v       v0, (a4);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, v16, v8, v0.t;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la  a6, test_{num}_data;
        vse{sew}.v v24, (a6);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection 

    test_vl_equal_zero_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a6, 0;
        csrw vxrm, a6;
        li a0, {leng}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v   v8, (a1);
        vle{sew2}.v v16, (a2);
        vle{sew}.v  v24, (a3);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {leng}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({leng}), ({sew}/8), 0;
        .popsection

    test_register_vd_equ_vs1_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a6, 0;
        csrw vxrm, a6;
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data};      
        vle{sew}.v    v8, (a1);
        vle{sew2}.v  v16, (a2);
        {name} v8, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v8, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_register_vd_equ_vs2_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a6, 0;
        csrw vxrm, a6;
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data};      
        vle{sew}.v    v8, (a1);
        vle{sew2}.v  v16, (a2);
        {name} v16, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v16, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_register_vs1_equ_vs2_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a6, 0;
        csrw vxrm, a6;
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew2}.v v16, (a2);
        vle{sew}.v  v24, (a3);
        {name} v24, v16, v16;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_register_vd_equ_vs1_vs2_without_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a6, 0;
        csrw vxrm, a6;
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a2, {vs2_data};        
        vle{sew2}.v v16, (a2);
        {name} v16, v16, v16;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a3, test_{num}_data;
        vse{sew}.v v16, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection  

    test_rounding_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        li a6, {vxrm};
        csrw vxrm, a6;
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data}; 
        la a3, {ori_data};      
        vle{sew}.v   v8, (a1);
        vle{sew2}.v v16, (a2);
        vle{sew}.v  v24, (a3);
        {name} v24, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_exception_sew_equ_elen_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);

        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, v8;
        j fail;
      test_{num}_end:

    test_exception_wrong_sew: |
      test_{num}: 
        li TESTNUM, {num};          
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);    

        li a0, {vl};     
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, v8;
        j fail;
      test_{num}_end:

    test_exception_wrong_lmul: |
      test_{num}: 
        li TESTNUM, {num};          
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);     

        li a0, {vl};    
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, v8; 
        j fail;
      test_{num}_end:    

    test_exception_wrong_lmul_vregNum: |
      test_{num}: 
        li TESTNUM, {num};            
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);     

        li a0, {vl};     
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} {vd_name}, {vs2_name}, {vs1_name}; 
        j fail;
      test_{num}_end:  
      
      
  rule: co_verification
  rule_params:
    test_basic_without_mask: np.array_equal(result, golden)
    test_basic_with_mask   : np.array_equal(result, golden)
    test_random_regression_without_mask: np.array_equal(result, golden)
    test_agnostic_tu_without_mask: np.array_equal(result, golden)
    test_vstart_not_equal_zero_without_mask: np.array_equal(result, golden)
    test_vstart_not_equal_zero_with_mask   : np.array_equal(result, golden) 
    test_vl_equal_zero_without_mask: np.array_equal(result, golden)
    test_register_vd_equ_vs1_without_mask: np.array_equal(result, golden)
    test_register_vd_equ_vs2_without_mask: np.array_equal(result, golden)
    test_register_vs1_equ_vs2_without_mask: np.array_equal(result, golden)
    test_register_vd_equ_vs1_vs2_without_mask: np.array_equal(result, golden)
    test_rounding_without_mask: np.array_equal(result, golden)
    

  basic_cases:
    test_basic_without_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: sew*2
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 0, sew, vl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew2), vl, dtype=bits_to_dtype_int(sew2))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew))

    test_basic_with_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: sew*2
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vma : ["ma", "mu"]
        vs1 : np.linspace( 0, sew2, vl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( bits_to_intmin(sew2), bits_to_intmax(sew)*4, vl, dtype=bits_to_dtype_int(sew2))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew))
        mask: vector_mask_array_random(vl)  

  random_cases: 
    test_random_regression_without_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : np.random.randint(1, vector_vlmax(lmul, sew, vlen)+1)
        vs1 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew2))
        ori : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))         
        vxrm: np.random.randint(4)
        vstart: np.random.randint(vl+2) 

  cases:
    test_agnostic_tu_without_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        tuvl: get_tailmax(lmul, sew, vlen)
        vs1 : np.linspace( 2, bits_to_intmax(sew), tuvl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( 1, bits_to_intmax(sew)*8, tuvl, dtype=bits_to_dtype_int(sew2))
        ori : np.linspace( 0, tuvl, tuvl, dtype=bits_to_dtype_int(sew))
        lmul_tu: 1 if isinstance(lmul,str) else lmul 

    test_vstart_not_equal_zero_without_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 2, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew2))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew))
        vstart: [vl//3]

    test_vstart_not_equal_zero_with_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 2, vl, vl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( -10, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew2))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew))
        mask: vector_mask_array_random(vl)
        vstart: [sew//2]

    test_vl_equal_zero_without_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : 0
        leng: vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 2, bits_to_intmax(sew), leng, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), leng, dtype=bits_to_dtype_int(sew2))
        ori : np.linspace( 0, leng, leng, dtype=bits_to_dtype_int(sew))

    test_register_vd_equ_vs1_without_mask :
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 0, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew2))
        ori : vs1
    
    test_register_vd_equ_vs2_without_mask :
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 1, vl, vl, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( 1, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew2))
        ori : vs2.astype(bits_to_dtype_int(sew))

    test_register_vs1_equ_vs2_without_mask :
      matrix:
        sew : [8, 16]
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 1, vl, vl, dtype=bits_to_dtype_int(sew2))
        vs1 : vs2.copy()
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew))

    test_register_vd_equ_vs1_vs2_without_mask :
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 1, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew2))
        vs1 : vs2.copy()
        ori : vs2.astype(bits_to_dtype_int(sew))  

    test_rounding_without_mask @ ori, vs1, vs2, sew, sew2, vl, lmul, vxrm:
      setup: |
        params_yml = []
        for sew in vector_sew_list_w(elen):
          for lmul in vector_lmul_list_w(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen): 
              for vxrm in [ 0, 1, 2, 3 ]:   
                sew2= 2*sew           
                vs1 = np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew))
                vs2 = np.linspace( 0, bits_to_intmax(sew)*8, vl, dtype=bits_to_dtype_int(sew2))
                ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew))
                params_yml.append([ori, vs1, vs2, sew, sew2, vl, lmul, vxrm])

    test_exception_sew_equ_elen_without_mask:
      matrix: 
        sew : elen
        sew2: elen
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_sew:
      matrix: 
        sew : [128, 512]
        lmul: [2, 8]        
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul:
      matrix: 
        sew : vector_sew_list_w(elen)
        lmul: vector_illegal_lmul(sew)
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul_vregNum @ sew, lmul, vl, vs1_name, vs2_name, vd_name:
      - [  8, 1, 50, "v10", "v1",  "v4"  ]
      - [ 16, 1, 50, "v10", "v3",  "v6"  ]
      - [  8, 2, 50, "v1",  "v2",  "v4"  ]
      - [ 16, 2, 50, "v1",  "v2",  "v4"  ]
      - [ 32, 2, 35, "v6",  "v3",  "v8"  ]
      - [ 64, 2, 15, "v10", "v18", "v11" ]
      - [  8, 4, 30, "v3",  "v4",  "v30" ]
      - [ 16, 4, 77, "v12", "v16", "v22" ]
      - [ 32, 8, 55, "v26", "v8",  "v16" ]
      - [ 64, 8, 33, "v0",  "v8",  "v27" ]

vnclip_wv:
   <<: *default


_: &unsigned
  <<: *default
  basic_cases:
    test_basic_without_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 0, sew, vl, dtype=bits_to_dtype_uint(sew))
        vs2 : np.linspace( 0, bits_to_uintmax(sew2), vl, dtype=bits_to_dtype_uint(sew2))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew))

    test_basic_with_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vma : ["ma", "mu"]
        vs1 : np.linspace( 0, sew2, vl, dtype=bits_to_dtype_uint(sew))
        vs2 : np.linspace( 0, bits_to_uintmax(sew)*4, vl, dtype=bits_to_dtype_uint(sew2))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew))
        mask: vector_mask_array_random(vl)  

  random_cases: 
    test_random_regression_without_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : np.random.randint(1, vector_vlmax(lmul, sew, vlen)+1)
        vs1 : np.random.uniform(0, bits_to_uintmax(sew), vl).astype(bits_to_dtype_uint(sew))
        vs2 : np.random.uniform(0, bits_to_uintmax(sew), vl).astype(bits_to_dtype_uint(sew2))
        ori : np.random.uniform(0, bits_to_uintmax(sew), vl).astype(bits_to_dtype_uint(sew))
        vxrm: np.random.randint(4)
        vstart: np.random.randint(vl+2)   

  cases:
    test_agnostic_tu_without_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        tuvl: get_tailmax(lmul, sew, vlen)
        vs1 : np.linspace( 2, bits_to_uintmax(sew), tuvl, dtype=bits_to_dtype_uint(sew))
        vs2 : np.linspace( 1, bits_to_uintmax(sew)*8, tuvl, dtype=bits_to_dtype_uint(sew2))
        ori : np.linspace( 0, tuvl, tuvl, dtype=bits_to_dtype_uint(sew))
        lmul_tu: 1 if isinstance(lmul,str) else lmul   

    test_vstart_not_equal_zero_without_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 2, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew))
        vs2 : np.linspace( 1, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew2))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew))
        vstart: [vl//3]

    test_vstart_not_equal_zero_with_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 2, vl, vl, dtype=bits_to_dtype_uint(sew))
        vs2 : np.linspace( 1, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew2))
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew))
        mask: vector_mask_array_random(vl)
        vstart: [sew//2]

    test_vl_equal_zero_without_mask:
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : 0
        leng: vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 2, bits_to_intmax(sew), leng, dtype=bits_to_dtype_int(sew))
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), leng, dtype=bits_to_dtype_int(sew2))
        ori : np.linspace( 0, leng, leng, dtype=bits_to_dtype_int(sew))

    test_register_vd_equ_vs1_without_mask :
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 0, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew))
        vs2 : np.linspace( 1, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew2))
        ori : vs1
    
    test_register_vd_equ_vs2_without_mask :
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( 1, vl, vl, dtype=bits_to_dtype_uint(sew))
        vs2 : np.linspace( 1, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew2))
        ori : vs2.astype(bits_to_dtype_uint(sew))

    test_register_vs1_equ_vs2_without_mask :
      matrix:
        sew : [8, 16]
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 1, bits_to_uintmax(sew2), vl, dtype=bits_to_dtype_uint(sew2))
        vs1 : vs2.copy()
        ori : np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew))

    test_register_vd_equ_vs1_vs2_without_mask :
      matrix:
        sew : vector_sew_list_w(elen)
        sew2: 2*sew 
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 1, bits_to_uintmax(sew), vl, dtype=bits_to_dtype_uint(sew2))
        vs1 : vs2.copy()
        ori : vs2.astype(bits_to_dtype_uint(sew))  

    test_rounding_without_mask @ ori, vs1, vs2, sew, sew2, vl, lmul, vxrm:
      setup: |
        params_yml = []
        for sew in [ 8, 16 ]: 
          for lmul in vector_lmul_list_w(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen): 
              for vxrm in [ 0, 1, 2, 3 ]:   
                sew2= 2*sew           
                vs1 = np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew))
                vs2 = np.linspace( 0, bits_to_uintmax(sew)*8, vl, dtype=bits_to_dtype_uint(sew2))
                ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_uint(sew))
                params_yml.append([ori, vs1, vs2, sew, sew2, vl, lmul, vxrm])

    test_exception_sew_equ_elen_without_mask:
      matrix: 
        sew : elen
        sew2: elen
        lmul: vector_lmul_list_w(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_sew:
      matrix: 
        sew : [128, 512]
        lmul: [2, 8]        
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul:
      matrix: 
        sew : vector_sew_list_w(elen)
        lmul: vector_illegal_lmul(sew)
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul_vregNum @ sew, lmul, vl, vs1_name, vs2_name, vd_name:
      - [  8, 1, 50, "v10", "v1",  "v4"  ]
      - [ 16, 1, 50, "v10", "v3",  "v6"  ]
      - [  8, 2, 50, "v1",  "v2",  "v4"  ]
      - [ 16, 2, 50, "v1",  "v2",  "v4"  ]
      - [ 32, 2, 35, "v6",  "v3",  "v8"  ]
      - [ 64, 2, 15, "v10", "v18", "v11" ]
      - [  8, 4, 30, "v3",  "v4",  "v30" ]
      - [ 16, 4, 77, "v12", "v16", "v22" ]
      - [ 32, 8, 55, "v26", "v8",  "v16" ]
      - [ 64, 8, 33, "v0",  "v8",  "v27" ]

vnclipu_wv:
   <<: *unsigned
