_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_basic_vmv_x_s: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        li a1, {rd};
        la a2, {vs2_data}; 
        vle{sew}.v  v8, (a2);       
        {name} a1, v8;  
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        {stins} a1, (a4); 
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill (1), ({sew}/8), 0;
        .popsection

    test_random_regression_vmv_x_s: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        li a1, {rd};
        la a2, {vs2_data}; 
        vle{sew}.v  v8, (a2); 
        li t0, {vstart};
        csrw vstart, t0;         
        {name} a1, v8; 
        csrr t1, vstart;
        beqz t1, 1f;
        j fail
      1:la a4, test_{num}_data;
        {stins} a1, (a4); 
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill (1), ({sew}/8), 0;
        .popsection

    test_vstart_not_eq_zero_vmv_x_s: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        li a1, {rd};
        la a2, {vs2_data}; 
        vle{sew}.v  v8, (a2); 
        li t0, {vstart};
        csrw vstart, t0;         
        {name} a1, v8; 
        csrr t1, vstart;
        beqz t1, 1f;
        j fail
      1:la a4, test_{num}_data;
        {stins} a1, (a4); 
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill (1), ({sew}/8), 0;
        .popsection

    test_vl_equal_zero_vmv_x_s: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {leng};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        li a1, {rd};
        la a2, {vs2_data}; 
        vle{sew}.v  v8, (a2);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;       
        {name} a1, v8;  
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {leng};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a4, test_{num}_data;
        {stins} a1, (a4); 
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill (1), ({sew}/8), 0;
        .popsection

    test_exception_wrong_sew: |
      test_{num}: 
        li TESTNUM, {num};          
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);  

        li a0, {vl};     
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} a1, v8;
        j fail;
      test_{num}_end:

    test_exception_wrong_lmul: |
      test_{num}: 
        li TESTNUM, {num};          
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);  

        li a0, {vl};    
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} a1, v8;
        j fail;
      test_{num}_end:   
      

  rule: co_verification  
  rule_params:
    test_basic_vmv_x_s: np.array_equal(result, golden)
    test_random_regression_vmv_x_s: np.array_equal(result, golden)
    test_vstart_not_eq_zero_vmv_x_s: np.array_equal(result, golden)
    test_vl_equal_zero_vmv_x_s: np.array_equal(result, golden)

        
vmv_x_s:
  <<: *default
  basic_cases:
    test_basic_vmv_x_s:
      matrix:
        sew : vector_sew_list(elen)
        lmul: vector_lmul_list(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 1, vl, vl, dtype=bits_to_dtype_int(sew))
        rd  : sew
        stins: store_sign_inst(sew)


  random_cases: 
    test_random_regression_vmv_x_s:
      matrix:
        sew : vector_sew_list(elen)
        lmul: vector_lmul_list(sew, elen)
        vl  : np.random.randint(1, vector_vlmax(lmul, sew, vlen)+1)
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
        rd  : np.random.randint(sew)
        stins : store_sign_inst(sew)
        vstart: np.random.randint(vl+2)


  cases:
    test_vstart_not_eq_zero_vmv_x_s:
      matrix:
        sew : vector_sew_list(elen)
        lmul: vector_lmul_list(sew, elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace( 1, vl, vl, dtype=bits_to_dtype_int(sew))
        rd  : sew
        stins : store_sign_inst(sew)
        vstart: [sew//2, vl//2]

    test_vl_equal_zero_vmv_x_s:
      matrix: 
        sew : [16, 64]
        lmul: vector_lmul_list(sew, elen)
        vl  : 0
        leng: vector_vl_list(lmul, sew, vlen)
        rd  : sew
        vs2 : np.linspace(1, leng, leng, dtype=bits_to_dtype_int(sew))
        stins: store_sign_inst(sew)

    test_exception_wrong_sew:
      matrix: 
        sew : [128, 512]
        lmul: [2, 8]        
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul:
      matrix: 
        sew : [16, 32, 64]
        lmul: vector_illegal_lmul(sew)
        vl  : vector_vl_list(lmul, sew, vlen)
