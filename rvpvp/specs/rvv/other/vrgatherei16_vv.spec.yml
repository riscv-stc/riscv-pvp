_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e16,m{emul},ta,ma;
        la a1, {vs1_data};
        vle16.v  v8, (a1);
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;     
        la a2, {vs2_data};        
        la a3, {ori_data};             
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        {name} v24,v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e16,m{emul},ta,ma;
        la a1, {vs1_data};
        vle16.v  v8, (a1);
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a2, {vs2_data};        
        la a6, {ori_data};
        vle1.v      v0, (a0);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a6);
        {name} v24, v16, v8, v0.t;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a3, test_{num}_data;
        vse{sew}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection  

    test_random_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e16,m{emul},ta,ma;
        la a1, {vs1_data};
        vle16.v  v8, (a1);
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;     
        la a2, {vs2_data};        
        la a3, {ori_data};             
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        li t2, {vstart};
        csrw vstart, t2;
        {name} v24,v16, v8;
        csrr t1, vstart;
        beqz t1, 1f;
        j fail
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_agnostic_tu_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {tail}; 
        vsetvli t0, a0, e16,m{emul},tu,ma;  #
        la a1, {vs1_data};
        vle16.v  v8, (a1);
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;     
        la a2, {vs2_data};        
        la a3, {ori_data};             
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},tu,ma; 
        {name} v24,v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {tail}; 
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;
        la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({tail}), ({sew}/8), 0;
        .popsection

    test_vstart_not_eq_zero_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e16,m{emul},ta,ma;
        la a1, {vs1_data};
        vle16.v  v8, (a1);
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;     
        la a2, {vs2_data};        
        la a3, {ori_data};             
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        li t2, {vstart};
        csrw vstart, t2;
        {name} v24, v16, v8;
        csrr t1, vstart;
        beqz t1, 1f;
        j fail
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_vstart_not_eq_zero_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e16,m{emul},ta,ma;
        la a1, {vs1_data};
        vle16.v  v8, (a1);
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a2, {vs2_data};        
        la a6, {ori_data};
        vle1.v      v0, (a0);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a6);
        li t2, {vstart};
        csrw vstart, t2;
        {name} v24, v16, v8, v0.t;
        csrr t1, vstart;
        beqz t1, 1f;
        j fail
      1:la a3, test_{num}_data;
        vse{sew}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection 

    test_vl_equal_zero_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {leng}; 
        vsetvli t0, a0, e16,m{emul},ta,ma;  
        la a1, {vs1_data};
        vle16.v  v8, (a1);
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;     
        la a2, {vs2_data};        
        la a3, {ori_data};             
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma; 
        {name} v24, v16, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {leng}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({leng}), ({sew}/8), 0;
        .popsection

    test_register_vs1_eq_vs2_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e16,m{emul},ta,ma;
        la a1, {vs1_data};
        vle16.v  v8, (a1);
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;            
        la a3, {ori_data};             
        vle{sew}.v v24, (a3);
        {name} v24, v8, v8;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a3, test_{num}_data;
        vse{sew}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_exception_sew_lmul_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);

        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v16, v8, v0;
        j fail;
      test_{num}_end:

    test_exception_wrong_sew: |
      test_{num}: 
        li TESTNUM, {num};          
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);      

        li a0, {vl};     
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, v8;
        j fail;
      test_{num}_end:

    test_exception_wrong_lmul: |
      test_{num}: 
        li TESTNUM, {num};          
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);  

        li a0, {vl};    
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, v8; 
        j fail;
      test_{num}_end:    

    test_exception_wrong_lmul_vregNum: |
      test_{num}: 
        li TESTNUM, {num};            
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);    
           
        li a0, {vl};     
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} {vd_name}, {vs2_name}, {vs1_name}; 
        j fail;
      test_{num}_end: 
                

  rule: co_verification
  rule_params:
    test_basic_without_mask: np.array_equal(result, golden)
    test_basic_with_mask   : np.array_equal(result, golden)
    test_random_regression_without_mask: np.array_equal(result, golden)
    test_vstart_not_eq_zero_without_mask: np.array_equal(result, golden)
    test_vstart_not_eq_zero_with_mask   : np.array_equal(result, golden)
    test_agnostic_tu_without_mask: np.array_equal(result, golden)
    test_register_vs1_eq_vs2_without_mask: np.array_equal(result, golden)
    test_vl_equal_zero_without_mask: np.array_equal(result, golden)


vrgatherei16_vv:
  <<: *default
  basic_cases:
    test_basic_without_mask @ ori, vs1, vs2, sew, vl, lmul, emul, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([7],dtype=np.uint8), np.array([0],dtype=np.uint16), np.array([0x10],dtype=np.uint8), 8, 1, 1, 2, vlen])
        params_yml.append([np.array([7,7,9,7],dtype=np.uint16), np.array([1,1,2,3],dtype=np.uint16), np.array([1,3,205,7],dtype=np.uint16), 16, 4, 1, 1, vlen])
        params_yml.append([np.linspace(0x40,0x80,32,dtype=np.uint8 ), np.linspace(0,31,32,dtype=np.uint16), np.linspace(0x20,0x000000ff,32,dtype=np.uint8 ),  8, 32, 1, 2, vlen])
        params_yml.append([np.linspace(0x40,0x80,vlen//16,dtype=np.uint16), np.linspace(0,63,vlen//16,dtype=np.uint16), np.linspace(0x20,0x00ff00ff,64,dtype=np.uint16), 16, vlen//16, 1, 1, vlen])
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list_w(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              vlen= vlen
              emul= vector_emul(16, sew, lmul)
              ori = np.linspace( 0, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs1 = np.linspace( 0, vl-1, vl, dtype=bits_to_dtype_uint(16))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, emul, vlen])
    
    test_basic_with_mask @ ori, vs1, vs2, sew, vl, lmul, emul, mask, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([7],dtype=np.uint8), np.array([1],dtype=np.uint16), np.array([0x10],dtype=np.uint8), 8, 1, 1, 2, np.array([0x0],dtype=np.uint8), vlen])
        params_yml.append([np.array([7,7,9,7],dtype=np.uint16), np.array([1,1,2,5],dtype=np.uint16), np.array([1,3,205,7],dtype=np.uint16), 16, 4, 1, 1, np.array([0x5],dtype=np.uint8), vlen])
        for sew in [8, 16, elen]:
          for lmul in vector_lmul_list_w(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              vlen= vlen
              emul= vector_emul(16, sew, lmul)
              ori = np.linspace( 0, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs1 = np.linspace( 0, vl-1, vl, dtype=bits_to_dtype_uint(16))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              mask= vector_mask_array_random(vl)
              params_yml.append([ori, vs1, vs2, sew, vl, lmul, emul, mask, vlen])


  random_cases:
    test_random_regression_without_mask: 
      matrix: 
        sew : vector_sew_list(elen)
        lmul: vector_lmul_list_w(sew, elen)
        vlen: vlen
        vl  : np.random.randint(1, vector_vlmax(lmul, sew, vlen)+1)
        emul: vector_emul(16, sew, lmul)
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
        vs1 : np.random.uniform(0, vl-1, vl).astype(bits_to_dtype_uint(16))
        ori : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
        vstart: np.random.randint(vl+2)
  

  cases:
    test_agnostic_tu_without_mask @ori, vs2, vs1, sew, lmul, emul, lmul_tu, vl, tail, vlen:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list_w(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              emul= vector_emul(16, sew, lmul)
              vlen= vlen
              tail= get_tailmax(lmul, sew, vlen)
              ori = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              vs1 = np.linspace( 0, tail-1, tail, dtype=bits_to_dtype_uint(16))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, vs1, sew, lmul, emul, lmul_tu, vl, tail, vlen])

    test_vstart_not_eq_zero_without_mask:
      matrix: 
        sew : vector_sew_list(elen)
        lmul: vector_lmul_list_w(sew, elen)
        vlen: vlen
        vl  : vector_vl_list(lmul, sew, vlen)
        emul: vector_emul(16, sew, lmul)
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
        vs1 : np.linspace( 0, vl-1, vl, dtype=bits_to_dtype_uint(16))
        ori : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
        vstart: np.random.randint(vl)   

    test_vstart_not_eq_zero_with_mask @ori, vs2, vs1, mask, sew, lmul, emul, vl, vstart, vlen:
      setup: |
        params_yml = []
        for sew in [8, 16, elen]:
          for lmul in vector_lmul_list_w(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              emul= vector_emul(16, sew, lmul)
              vlen= vlen
              ori = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs1 = np.linspace( 0, vl-1, vl, dtype=bits_to_dtype_uint(16))
              mask= vector_mask_array_random(vl)
              vstart = vl//2
              params_yml.append([ori, vs2, vs1, mask, sew, lmul, emul, vl, vstart, vlen])

    test_vl_equal_zero_without_mask:
      matrix: 
        sew : [8, 32]
        lmul: vector_lmul_list_w(sew, elen)
        vlen: vlen
        vl  : 0
        leng: vector_vl_list(lmul, sew, vlen)
        emul: vector_emul(16, sew, lmul)
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), leng, dtype=bits_to_dtype_int(sew))
        vs1 : np.linspace( 0, leng, leng, dtype=bits_to_dtype_uint(16))
        ori : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), leng, dtype=bits_to_dtype_int(sew)) 

    test_register_vs1_eq_vs2_without_mask:
      matrix: 
        sew : [16] 
        lmul: vector_lmul_list_w(sew, elen)
        vlen: vlen
        vl  : vector_vl_list(lmul, sew, vlen)
        emul: vector_emul(16, sew, lmul)        
        vs1 : np.linspace( 0, vl-1, vl, dtype=bits_to_dtype_uint(16))
        vs2 : vs1
        ori : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))

    test_exception_sew_lmul_without_mask  @ vl, sew, lmul, emul:
      setup: |
        params_yml = []
        params_yml.append([ 1,  8,    8, 16])
        params_yml.append([ 1, 32, "f8", 16])
        params_yml.append([ 1, 64, "f4", 16])
        params_yml.append([ 1, 64, "f8", 16])

    test_exception_wrong_sew:
      matrix: 
        sew : [128, 512]
        lmul: [2, 8]        
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul:
      matrix: 
        sew : [16, 32, 64]
        lmul: vector_illegal_lmul(sew)
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul_vregNum @ sew, lmul, vl, vs1_name, vs2_name, vd_name:
      - [  8, 2, 50, "v1",  "v2",  "v4"  ]
      - [ 16, 2, 50, "v1",  "v2",  "v4"  ]
      - [ 32, 2, 35, "v6",  "v3",  "v8"  ]
      - [  8, 4, 30, "v3",  "v4",  "v30" ]
      - [ 16, 4, 77, "v12", "v16", "v22" ]
      - [ 32, 8, 55, "v26", "v8",  "v16" ]
        