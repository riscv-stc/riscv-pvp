_: &default
  head: |
    #include "exception.h"
  env: RVTEST_RV64UV
  templates:
    test_basic_without_mask: |
      test_{num}:          
        li TESTNUM, {num};
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a2, {vs2_data};
        la a3, {ori_data};
        vle{sew}.v  v8, (a2);
        vle{sew}.v v16, (a3);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v16, v8, {uimm};
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a3, test_{num}_data;
        vse{sew}.v  v16, (a3);     
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {tail}, ({sew}/8), 0; #ori_shape[0]
        .popsection 

    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a0, {mask_data};
        la a2, {vs2_data};
        la a3, {ori_data};       
        vle1.v      v0, (a0); 
        vle{sew}.v  v8, (a2);        
        vle{sew}.v v16, (a3);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v16, v8, {uimm}, v0.t;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a3, test_{num}_data;
        vse{sew}.v  v16, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {tail}, ({sew}/8), 0;
        .popsection  

    test_random_regression_without_mask: |
      test_{num}:          
        li TESTNUM, {num};
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a2, {vs2_data};
        la a3, {ori_data};
        vle{sew}.v  v8, (a2);
        vle{sew}.v v16, (a3);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        li t0, {vstart};
        csrw vstart, t0;  
        {name} v16, v8, {uimm};
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a3, test_{num}_data;
        vse{sew}.v  v16, (a3);    
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {tail}, ({sew}/8), 0; 
        .popsection
    
    test_agnostic_tu_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;
        la a2, {vs2_data};
        la a3, {ori_data};
        la a0, {mask_data};
        vle{sew}.v  v0, (a0); 
        vle{sew}.v  v8, (a2);        
        vle{sew}.v v16, (a3);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        {name} v16, v8, {uimm}, v0.t;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},tu,ma;
        la a3, test_{num}_data;
        vse{sew}.v  v16, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {tail}, ({sew}/8), 0;
        .popsection 
        
    test_vstart_not_eq_zero_without_mask: |   
      test_{num}: 
        li TESTNUM, {num};                             
        li a0, {tail}; 
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a2, {vs2_data};            
        la a3, {ori_data};            
        vle{sew}.v  v8, (a2);
        vle{sew}.v v16, (a3);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        li t0, {vstart};
        csrw vstart, t0;              
        {name} v16, v8, {uimm};            
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {tail}; 
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a3, test_{num}_data; 
        vse{sew}.v  v16, (a3);             
        .pushsection .data, 1; 
        .balign ({sew}/8)
      test_{num}_data:
        .fill {tail}, ({sew}/8), 0; 
        .popsection 

    test_vstart_not_eq_zero_with_mask: |   
      test_{num}: 
        li TESTNUM, {num};            // {num} set automatically
        li a0, {tail}; 
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a0, {mask_data} ;
        la a2, {vs2_data};            // vs2 data label
        la a3, {ori_data};            // original data label of target register 
        vle1.v      v0, (a0);
        vle{sew}.v  v8, (a2);
        vle{sew}.v v16, (a3);               
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        li t0, {vstart};
        csrw vstart, t0;              // set vstart 
        {name} v16, v8, {uimm}, v0.t; // {name} is the test instruction
        csrr t0, vstart;
        beqz t0, 1f;                  // test if vstart==0 after the instruction
        j fail;
      1:li a0, {tail}; 
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a3, test_{num}_data; 
        vse{sew}.v v16, (a3);         // save the result data into test_{num}_data memory
        .pushsection .data, 1; 
        .balign ({sew}/8)
      test_{num}_data:
        .fill {tail}, ({sew}/8), 0;   // {vl} sets of ({sew}/8) bytes 0
        .popsection 

    test_vl_equal_zero_without_mask: |
      test_{num}:          
        li TESTNUM, {num};
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a2, {vs2_data};
        la a3, {ori_data};
        vle{sew}.v  v8, (a2);
        vle{sew}.v v16, (a3);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v16, v8, {uimm};
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a3, test_{num}_data;
        vse{sew}.v  v16, (a3);     
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {tail}, ({sew}/8), 0; #ori_shape[0]
        .popsection 

    test_register_vd_equ_vs2_without_mask: |
      test_{num}:          
        li TESTNUM, {num};
        li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a2, {vs2_data};
        vle{sew}.v  v8, (a2);
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v8, v8, {uimm};
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a3, test_{num}_data;
        vse{sew}.v  v8, (a3);      
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {tail}, ({sew}/8), 0; #ori_shape[0]
        .popsection 
   
    test_exception_wrong_sew: |
      test_{num}: 
        li TESTNUM, {num};          
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);    

        li a0, {vl};     
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, 1;
        j fail;
      test_{num}_end:

    test_exception_wrong_lmul: |
      test_{num}: 
        li TESTNUM, {num};          
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);    

        li a0, {vl};    
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, 1; 
        j fail;
      test_{num}_end:    

    test_exception_wrong_lmul_vregNum: |
      test_{num}: 
        li TESTNUM, {num};            
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);    
           
        li a0, {vl};     
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} {vd_name}, {vs2_name}, 1; 
        j fail;
      test_{num}_end: 

      
  rule: co_verification
  rule_params:
    test_basic_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True )
    test_basic_with_mask   : np.allclose( result, golden, rtol=0, atol=0, equal_nan=True ) 
    test_random_regression_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True ) 
    test_agnostic_tu_with_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True ) 
    test_vstart_not_eq_zero_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True )
    test_vstart_not_eq_zero_with_mask   : np.allclose( result, golden, rtol=0, atol=0, equal_nan=True ) 
    test_vl_equal_zero_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True )  
    test_register_vd_equ_vs2_without_mask: np.allclose( result, golden, rtol=0, atol=0, equal_nan=True )  


vslideup_vi:
  <<: *default 
  basic_cases:
    test_basic_without_mask @ ori, vs2, uimm, sew, lmul, lmul_tu, vl, tail, vlen:
      setup: |
        params_yml = []
        # params_yml.append([np.array([0x3,0x3],dtype=np.uint8),       np.array([0x5,0x7],dtype=np.uint8),         np.uint8(0x6),   8,    1,  2, vlen//8, vlen])
        # params_yml.append([np.array([0x3,0x3,0x3,3],dtype=np.uint8), np.array([0x1,0x1,0x5,0x7],dtype=np.uint8), np.uint8(0x4),   8,    1,  4, vlen//8, vlen])
        params_yml.append([np.linspace(0x40,0x50,vlen//8,dtype=np.uint8), np.linspace(0x00,0x10,vlen//8,dtype=np.uint8),   np.uint8(0x1),   8, "f2", 1, 15, vlen//8, vlen])
        params_yml.append([np.linspace(0x40,0x60,vlen//8,dtype=np.uint8), np.linspace(0x00,0x20,vlen//8,dtype=np.uint8),   np.uint8(0x1),   8,    1, 1, 32, vlen//8, vlen])
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew, vlen)
              vlen= vlen
              ori = np.linspace( 0, tail, tail, dtype=bits_to_dtype_int(sew))
              uimm= min(np.random.randint(tail), 31)
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, uimm, sew, lmul, lmul_tu, vl, tail, vlen])
   
    test_basic_with_mask @ ori, vs2, uimm, sew, lmul, lmul_tu, vl, mask, tail, vlen:
      setup: |
        params_yml = []
        for sew in [8, 16, elen]:
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew, vlen)
              vlen= vlen
              ori = np.linspace( 0, tail, tail, dtype=bits_to_dtype_int(sew))
              uimm= min(np.random.randint(tail), 31)
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              mask= vector_mask_array_random(tail)
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, uimm, sew, lmul, lmul_tu, vl, mask, tail, vlen])

  random_cases:
    test_random_regression_without_mask:
      matrix: 
        sew : vector_sew_list(elen)
        lmul: vector_lmul_list(sew, elen)
        tail: get_tailmax(lmul, sew, vlen)  
        vlen: vlen
        vl  : np.random.randint(1, vector_vlmax(lmul, sew, vlen)+1)
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), tail).astype(bits_to_dtype_int(sew))
        ori : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), tail).astype(bits_to_dtype_int(sew))
        uimm: np.random.randint(32)
        vstart: np.random.randint(tail)
        lmul_tu: 1 if isinstance(lmul,str) else lmul  

  cases:
    test_agnostic_tu_with_mask @ori, vs2, uimm, mask, sew, lmul, lmul_tu, vl, tail, vlen:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew, vlen)
              vlen= vlen
              ori = np.linspace( 0, tail, tail, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              uimm= min(np.random.randint(vl+2), 31)
              mask= vector_mask_array_random(tail)
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, uimm, mask, sew, lmul, lmul_tu, vl, tail, vlen])

    test_vstart_not_eq_zero_without_mask @ ori, vs2, uimm, sew, lmul, lmul_tu, vl, vstart, tail, vlen:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vstart in np.array([min(vl//3,7),min(np.random.uniform(sew),31)],dtype=bits_to_dtype_int(sew)):
                tail= get_tailmax(lmul, sew, vlen)
                vlen= vlen
                ori = np.linspace( 0, tail,  tail, dtype=bits_to_dtype_int(sew))
                uimm= min(np.random.randint(tail), 31)
                vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
                lmul_tu = 1 if isinstance(lmul,str) else lmul
                params_yml.append([ori, vs2, uimm, sew, lmul, lmul_tu, vl, vstart, tail, vlen])

    test_vstart_not_eq_zero_with_mask @ ori, vs2, uimm, sew, lmul, lmul_tu, vl, mask, vstart, tail, vlen:
      setup: |
        params_yml = []
        for sew in [8, 16, elen]:
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vstart in np.array([min(vl//3,7)],dtype=bits_to_dtype_int(sew)):
                tail= get_tailmax(lmul, sew, vlen)
                vlen= vlen
                ori = np.linspace( 0, tail,  tail, dtype=bits_to_dtype_int(sew))
                uimm= min(np.random.randint(tail), 31)
                vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
                mask= vector_mask_array_random(tail)
                lmul_tu = 1 if isinstance(lmul,str) else lmul
                params_yml.append([ori, vs2, uimm, sew, lmul, lmul_tu, vl, mask, vstart, tail, vlen])

    test_vl_equal_zero_without_mask:
      matrix: 
        sew : vector_sew_list(elen)
        lmul: vector_lmul_list(sew, elen)
        tail: get_tailmax(lmul, sew, vlen) 
        vlen: vlen 
        vl  : 0
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
        ori : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
        uimm: np.random.randint(32)
        lmul_tu: 1 if isinstance(lmul,str) else lmul  

    test_exception_wrong_sew:
      matrix: 
        sew : [128, 512]
        lmul: [2, 8]        
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul:
      matrix: 
        sew : [16, 32, 64]
        lmul: vector_illegal_lmul(sew)
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul_vregNum @ sew, lmul, vl, vs2_name, vd_name:
      - [  8, 2, 50, "v1",  "v4"  ]
      - [ 16, 2, 50, "v3",  "v5"  ]
      - [ 32, 2, 35, "v3",  "v8"  ]
      - [  8, 4, 30, "v4",  "v27" ]
      - [ 16, 4, 77, "v16", "v22" ]
      - [ 32, 8, 55, "v8",  "v18" ]
      
      
vslidedown_vi:
  <<: *default
  basic_cases:
    test_basic_without_mask @ ori, vs2, uimm, sew, lmul, lmul_tu, vl, tail, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.linspace(0x40,0x50,vlen//8,dtype=np.uint8), np.linspace(0x00,0x10,vlen//8,dtype=np.uint8), np.uint8(0x1), 8, "f2", 1, 15, vlen//8, vlen])
        params_yml.append([np.linspace(0x40,0x60,vlen//8,dtype=np.uint8), np.linspace(0x00,0x20,vlen//8,dtype=np.uint8), np.uint8(0x1), 8,    1, 1, 32, vlen//8, vlen])
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew, vlen)
              vlen= vlen
              ori = np.linspace( 0, tail, tail, dtype=bits_to_dtype_int(sew))
              uimm= min(np.random.randint(tail), 31) 
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, uimm, sew, lmul, lmul_tu, vl, tail, vlen])
   
    test_basic_with_mask @ ori, vs2, uimm, sew, lmul, lmul_tu, vl, mask, tail, vlen:
      setup: |
        params_yml = []
        for sew in [8, 16, elen]:
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew, vlen)
              vlen= vlen
              ori = np.linspace( 0, tail, tail, dtype=bits_to_dtype_int(sew))
              uimm= min(np.random.randint(tail), 31)
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              mask= vector_mask_array_random(tail)
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, uimm, sew, lmul, lmul_tu, vl, mask, tail, vlen])

  random_cases:
    test_random_regression_without_mask:
      matrix: 
        sew : vector_sew_list(elen)
        lmul: vector_lmul_list(sew, elen)
        tail: get_tailmax(lmul, sew, vlen)  
        vlen: vlen
        vl  : np.random.randint(1, vector_vlmax(lmul, sew, vlen)+1)
        vs2 : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), tail).astype(bits_to_dtype_int(sew))
        ori : np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), tail).astype(bits_to_dtype_int(sew))
        uimm: np.random.randint(32)
        vstart: np.random.randint(tail)
        lmul_tu: 1 if isinstance(lmul,str) else lmul  

  cases:
    test_agnostic_tu_with_mask @ori, vs2, uimm, mask, sew, lmul, lmul_tu, vl, tail, vlen:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew, vlen)
              vlen= vlen
              ori = np.linspace( 1, tail, tail, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              uimm= min(np.random.randint(vl), 31)
              mask= vector_mask_array_random(tail)
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, uimm, mask, sew, lmul, lmul_tu, vl, tail, vlen])

    test_vstart_not_eq_zero_without_mask @ ori, vs2, uimm, sew, lmul, lmul_tu, vl, vstart, tail, vlen:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vstart in np.array([min(vl//3,7),min(np.random.uniform(sew),31)],dtype=bits_to_dtype_int(sew)):
                tail= get_tailmax(lmul, sew, vlen)
                vlen= vlen
                ori = np.linspace( 0, tail,  tail, dtype=bits_to_dtype_int(sew))
                uimm= min(np.random.randint(tail), 31)
                vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
                lmul_tu = 1 if isinstance(lmul,str) else lmul
                params_yml.append([ori, vs2, uimm, sew, lmul, lmul_tu, vl, vstart, tail, vlen])

    test_vstart_not_eq_zero_with_mask @ ori, vs2, uimm, sew, lmul, lmul_tu, vl, mask, vstart, tail, vlen:
      setup: |
        params_yml = []
        for sew in [8, 16, elen]:
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vstart in np.array([min(vl//3,7)],dtype=bits_to_dtype_int(sew)):
                tail= get_tailmax(lmul, sew, vlen)
                vlen= vlen
                ori = np.linspace( 0, tail, tail, dtype=bits_to_dtype_int(sew))
                uimm= min(np.random.randint(tail), 31)
                vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
                mask= vector_mask_array_random(tail)
                lmul_tu = 1 if isinstance(lmul,str) else lmul
                params_yml.append([ori, vs2, uimm, sew, lmul, lmul_tu, vl, mask, vstart, tail, vlen])

    test_vl_equal_zero_without_mask:
      matrix: 
        sew : vector_sew_list(elen)
        lmul: vector_lmul_list(sew, elen)
        tail: get_tailmax(lmul, sew, vlen)  
        vlen: vlen
        vl  : 0
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
        ori : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
        uimm: np.random.randint(32)
        lmul_tu: 1 if isinstance(lmul,str) else lmul  
        
    test_register_vd_equ_vs2_without_mask @ ori, vs2, uimm, sew, lmul, lmul_tu, vl, tail, vlen:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew, vlen)   
              vlen= vlen           
              uimm= min(np.random.randint(tail), 31) 
              vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              ori = vs2
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, uimm, sew, lmul, lmul_tu, vl, tail, vlen])
 
    test_exception_wrong_sew:
      matrix: 
        sew : [128, 512]
        lmul: [2, 8]        
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul:
      matrix: 
        sew : [16, 32, 64]
        lmul: vector_illegal_lmul(sew)
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul_vregNum @ sew, lmul, vl, vs2_name, vd_name:
      - [  8, 2, 50, "v1",  "v4"  ]
      - [ 16, 2, 50, "v3",  "v5"  ]
      - [ 32, 2, 35, "v3",  "v8"  ]
      - [  8, 4, 30, "v4",  "v27" ]
      - [ 16, 4, 77, "v16", "v22" ]
      - [ 32, 8, 55, "v8",  "v18" ]
                    