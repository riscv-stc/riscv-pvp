_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  rule: co_verification
  templates:
    test_vset_normal: |
      test_{num}:
        li  TESTNUM, {num};
        li  x1, {rs_vl};
        {name} x14, x1, e{sew},m{lmul},{vta},{vma}; 
        li  x7, {test_vl};
        bne x14, x7, fail_{num};
        j pass_{num};
      fail_{num}:
        j fail;
      pass_{num}:
        csrr t1, vl;
        bne  t1, x7, fail_{num};
        li   x7, {test_vtype};
        csrr x8, vtype;
        bne  x8, x7, fail_{num};

    test_vset_rd_zero: |
      test_{num}:
        li  TESTNUM, {num};
        li  x1, {rs_vl};
        {name} x0, x1, e{sew},m{lmul},{vta},{vma};  
        li  x7, {test_vl};
        csrr t1, vl;
        bne t1, x7, fail_{num};
        j pass_{num};
      fail_{num}:
        j fail;
      pass_{num}:
        li   x7, {test_vtype};
        csrr x8, vtype;
        bne  x8, x7, fail_{num};

    test_vset_only_rs1_zero: |
      test_{num}:
        li  TESTNUM, {num};
        {name} x14, x0, e{sew},m{lmul},{vta},{vma}; 
        li  x7, {test_vl};
        bne x14, x7, fail_{num};
        j pass_{num};
      fail_{num}:
        j fail;
      pass_{num}:
        csrr t1, vl;
        bne  t1, x7, fail_{num};
        li   x7, {test_vtype};
        csrr x8, vtype;
        bne  x8, x7, fail_{num};

    test_vset_rd_rs1_zero: |
      test_{num}:
        li  TESTNUM, {num};
        li  x1, {rs_vl};
        {name} x2, x1, e{sew},m{lmul},{vta},{vma};  
        {name} x0, x0, e{sew},m{lmul},{vta},{vma}; 
        li  x7, {test_vl};
        csrr t1, vl;
        bne  t1, x7, fail_{num};
        j pass_{num};
      fail_{num}:
        j fail;
      pass_{num}:
        li   x7, {test_vtype};
        csrr x8, vtype;
        bne  x8, x7, fail_{num};
 
    test_exception_vset_sew: |
      test_{num}:
        li  TESTNUM, {num};
        li  x1, {rs_vl};
        {name} x14, x1, e{sew},m{lmul},{vta},{vma}; 
        li  x7, {test_vl};
        bne x14, x7, fail_{num};
        j pass_{num};
      fail_{num}:
        j fail;
      pass_{num}:
        csrr t1, vl;
        bne  t1, x7, fail_{num};
        li   x7, {test_vtype};
        csrr x8, vtype;
        bne  x8, x7, fail_{num};


# FIXME: set vl value in spike set_vl() function is confict with spec in chapter "Constraints on Setting vl"
#        detailed: ceil(AVL/2) <= vl <=VLMAX if AVL < 2*VLMAX
vsetvli:
  <<: *default
  basic_cases:
    test_vset_normal @ sew, lmul, vma, vta, test_vtype, rs_vl, test_vl:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):        
          for lmul in vector_lmul_list(sew, elen):   
            for vta in ["ta", "tu"]:
              for vma in ["ma", "mu"]:
                # sew8 : 0<<3, sew16: 1<<3, sew32: 2<<3, sew64: 3<<3
                sewD  = { 8:0, 16:8, 32:16, 64:24 }  
                # lmul1: 0, lmul2: 1, lmul4: 2, lmul8: 3, lmulf8: 5, lmulf4: 6, lmulf2: 7
                lmulD = { 1:0, 2:1, 4:2, 8:3, 'f8':5, 'f4':6, 'f2':7 }
                vtaD  = {'ta': 1<<6, 'tu': 0<<6 }
                vmaD  = {'ma': 1<<7, 'mu': 0<<7 }
                test_vtype = sewD[sew] + lmulD[lmul] + vtaD[vta] + vmaD[vma]

                vlmax = vector_vlmax(lmul, sew, vlen)  
                test_vl = 0
                for rs_vl in [ 0, 1, vlmax//2-1, vlmax-1 , vlmax, 2*vlmax-1 ]:  #  vlmax+2, 2*vlmax, 2*vlmax+1                               
                  if rs_vl <= vlmax:
                    test_vl = rs_vl
                  # elif rs_vl < 2*vlmax:
                  #   test_vl = (rs_vl+1)//2
                  else:
                    test_vl = vlmax
                  params_yml.append([sew, lmul, vma, vta, test_vtype, rs_vl, test_vl])

  random_cases: 
    test_vset_normal @ sew, lmul, vma, vta, test_vtype, rs_vl, test_vl:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):        
          for lmul in vector_lmul_list(sew, elen):   
            for vta in ["ta", "tu"]:
              for vma in ["ma", "mu"]:
                sewD  = { 8:0, 16:8, 32:16, 64:24 }  
                lmulD = { 1:0, 2:1, 4:2, 8:3, 'f8':5, 'f4':6, 'f2':7 }
                vtaD  = {'ta': 1<<6, 'tu': 0<<6 }
                vmaD  = {'ma': 1<<7, 'mu': 0<<7 }
                test_vtype = sewD[sew] + lmulD[lmul] + vtaD[vta] + vmaD[vma]

                vlmax = vector_vlmax(lmul, sew, vlen)  
                test_vl = 0
                for rs_vl in [ 0, 1, vlmax//2-1, vlmax-1 , vlmax, 2*vlmax-1 ]:                              
                  if rs_vl <= vlmax:
                    test_vl = rs_vl
                  else:
                    test_vl = vlmax
                  params_yml.append([sew, lmul, vma, vta, test_vtype, rs_vl, test_vl])

  cases:
    test_vset_normal @ sew, lmul, vma, vta, test_vtype, rs_vl, test_vl:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):        
          for lmul in vector_lmul_list(sew, elen):   
            for vta in ["ta", "tu"]:
              for vma in ["ma", "mu"]:
                sewD  = { 8:0, 16:8, 32:16, 64:24 }  
                lmulD = { 1:0, 2:1, 4:2, 8:3, 'f8':5, 'f4':6, 'f2':7 }
                vtaD  = {'ta': 1<<6, 'tu': 0<<6 }
                vmaD  = {'ma': 1<<7, 'mu': 0<<7 }
                test_vtype = sewD[sew] + lmulD[lmul] + vtaD[vta] + vmaD[vma]

                vlmax = vector_vlmax(lmul, sew, vlen)  
                test_vl = 0
                for rs_vl in [ 0, 1, vlmax//2-1, vlmax-1 , vlmax, 2*vlmax-1 ]:                               
                  if rs_vl <= vlmax:
                    test_vl = rs_vl
                  else:
                    test_vl = vlmax
                  params_yml.append([sew, lmul, vma, vta, test_vtype, rs_vl, test_vl])

    test_vset_rd_zero @ sew, lmul, vma, vta, test_vtype, rs_vl, test_vl:
      setup: |
        params_yml = []
        for sew in [16, 32, 64]:        
          for lmul in vector_lmul_list(sew, elen):   
            for vta in ["ta", "tu"]:
              for vma in ["ma", "mu"]:
                sewD  = { 8:0, 16:8, 32:16, 64:24 }  
                lmulD = { 1:0, 2:1, 4:2, 8:3, 'f8':5, 'f4':6, 'f2':7 }
                vtaD  = {'ta': 1<<6, 'tu': 0<<6 }
                vmaD  = {'ma': 1<<7, 'mu': 0<<7 }
                test_vtype = sewD[sew] + lmulD[lmul] + vtaD[vta] + vmaD[vma]

                vlmax = vector_vlmax(lmul, sew, vlen)  
                test_vl = 0
                for rs_vl in [ 0, vlmax//2-1, vlmax-1 , vlmax, 2*vlmax-1 ]:                             
                  if rs_vl <= vlmax:
                    test_vl = rs_vl
                  else:
                    test_vl = vlmax
                  params_yml.append([sew, lmul, vma, vta, test_vtype, rs_vl, test_vl])

    test_vset_only_rs1_zero @ sew, lmul, vma, vta, test_vtype, test_vl:
      setup: |
        params_yml = []
        for sew in [8, 32, 64]:        
          for lmul in vector_lmul_list(sew, elen):   
            for vta in ["ta", "tu"]:
              for vma in ["ma", "mu"]:
                sewD  = { 8:0, 16:8, 32:16, 64:24 }  
                lmulD = { 1:0, 2:1, 4:2, 8:3, 'f8':5, 'f4':6, 'f2':7 }
                vtaD  = {'ta': 1<<6, 'tu': 0<<6 }
                vmaD  = {'ma': 1<<7, 'mu': 0<<7 }
                test_vtype = sewD[sew] + lmulD[lmul] + vtaD[vta] + vmaD[vma]
                test_vl = vector_vlmax(lmul, sew, vlen)  
                params_yml.append([sew, lmul, vma, vta, test_vtype, test_vl])

    test_vset_rd_rs1_zero @ sew, lmul, vma, vta, test_vtype, rs_vl, test_vl:
      setup: |
        params_yml = []
        for sew in [8, 16, 64]:        
          for lmul in vector_lmul_list(sew, elen):   
            for vta in ["ta", "tu"]:
              for vma in ["ma", "mu"]:
                sewD  = { 8:0, 16:8, 32:16, 64:24 }  
                lmulD = { 1:0, 2:1, 4:2, 8:3, 'f8':5, 'f4':6, 'f2':7 }
                vtaD  = {'ta': 1<<6, 'tu': 0<<6 }
                vmaD  = {'ma': 1<<7, 'mu': 0<<7 }
                test_vtype = sewD[sew] + lmulD[lmul] + vtaD[vta] + vmaD[vma]

                vlmax = vector_vlmax(lmul, sew, vlen)  
                test_vl = 0
                for rs_vl in [ 0, vlmax//2-1, vlmax-1 , vlmax, 2*vlmax-1 ]:                             
                  if rs_vl <= vlmax:
                    test_vl = rs_vl
                  else:
                    test_vl = vlmax
                  params_yml.append([sew, lmul, vma, vta, test_vtype, rs_vl, test_vl])

    test_exception_vset_sew:
      matrix: 
        sew : [128, 256, 512, 1024]
        lmul: [1, 2, 4, 8, 'f8', 'f4', 'f2'] 
        vta : ["ta", "tu"]
        vma : ["ma", "mu"]
        rs_vl: [ 0, 7, 31 ]
        test_vl: 0
        test_vtype: 1<<(xlen-1)
