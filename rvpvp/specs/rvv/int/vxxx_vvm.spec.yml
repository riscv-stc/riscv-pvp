_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,{vma};
        la a0, {mask_data};
        la a1, {vs1_data};
        la a2, {vs2_data};  
        la a3, {ori_data};       
        vle1.v  v0, (a0);
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        {name} v24, v16, v8, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection 

    test_random_regression_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a1, {vs1_data};
        la a2, {vs2_data};  
        la a3, {ori_data};       
        vle1.v      v0, (a0);
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, v16, v8, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection 

    test_agnostic_tu_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {tail}; 
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;      
        la a0, {mask_data};
        la a1, {vs1_data};
        la a2, {vs2_data};  
        la a3, {ori_data};      
        vle1.v      v0, (a0);
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},tu,ma;
        {name} v24, v16, v8, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {tail};
        vsetvli t0, a0, e{sew},m{lmul_tu},ta,ma;
        la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({tail}), ({sew}/8), 0;
        .popsection  

    test_vstart_not_equal_zero_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a4, {mask_data};
        la a3, {ori_data};
        la a2, {vs2_data};
        la a1, {vs1_data};
        vle{sew}.v v24, (a3);
        vle{sew}.v v16, (a2);
        vle{sew}.v  v8, (a1);
        vle1.v      v0, (a4);
        li t0, {vstart};
        csrw vstart, t0;
        {name} v24, v16, v8, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la  a6, test_{num}_data;
        vse{sew}.v v24, (a6);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection 

    test_vl_equal_zero_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {leng}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a1, {vs1_data};
        la a2, {vs2_data};  
        la a3, {ori_data};       
        vle1.v  v0, (a0);
        vle{sew}.v  v8, (a1);
        vle{sew}.v v16, (a2);
        vle{sew}.v v24, (a3);
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, v8, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:li a0, {leng}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a4, test_{num}_data;
        vse{sew}.v v24, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({leng}), ({sew}/8), 0;
        .popsection 

    test_register_vd_equ_vs1_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data};  
        la a4, {mask_data};    
        vle{sew}.v  v8, (a1);
        vle{sew}.v  v16,(a2);
        vle1.v      v0, (a4);
        {name} v8, v16, v8, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v8, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_register_vd_equ_vs2_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a2, {vs2_data};  
        la a4, {mask_data};    
        vle{sew}.v  v8, (a1);
        vle{sew}.v  v16,(a2);
        vle1.v      v0, (a4);
        {name} v16, v16, v8, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v16, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_register_vd_equ_vs1_vs2_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a1, {vs1_data};
        la a4, {mask_data};    
        vle{sew}.v v8, (a1);
        vle1.v     v0, (a4);
        {name} v8, v8, v8, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a4, test_{num}_data;
        vse{sew}.v v8, (a4);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection

    test_register_vs1_equ_vs2_with_mask: |
      test_{num}:
        li TESTNUM, {num}; 
        li a0, {vl}; 
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        la a0, {mask_data};
        la a1, {vs1_data};      
        la a6, {ori_data};
        vle1.v      v0, (a0);
        vle{sew}.v  v8, (a1);
        vle{sew}.v v24, (a6);
        {name} v24, v8, v8, v0;
        csrr t0, vstart;
        beqz t0, 1f;                  
        j fail;
      1:la a3, test_{num}_data;
        vse{sew}.v v24, (a3);
        .pushsection .data, 1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill ({vl}), ({sew}/8), 0;
        .popsection 

    test_exception_wrong_sew: |
      test_{num}: 
        li TESTNUM, {num};          
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);    

        li a0, {vl};     
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, v8, v0;
        j fail;
      test_{num}_end:

    test_exception_wrong_lmul: |
      test_{num}: 
        li TESTNUM, {num};          
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);   

        li a0, {vl};    
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} v24, v16, v8, v0; 
        j fail;
      test_{num}_end:    

    test_exception_wrong_lmul_vregNum: |
      test_{num}: 
        li TESTNUM, {num};            
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sw t0, 0(t1);     

        li a0, {vl};     
        vsetvli t0, a0, e{sew},m{lmul},ta,ma;
        {name} {vd_name}, {vs2_name}, {vs1_name}, v0; 
        j fail;
      test_{num}_end:  

  
  rule: co_verification
  rule_params:
    test_basic_with_mask: np.array_equal(result, golden)
    test_random_regression_with_mask: np.array_equal(result, golden)
    test_agnostic_tu_with_mask: np.array_equal(result, golden)
    test_vstart_not_equal_zero_with_mask: np.array_equal(result, golden)
    test_vl_equal_zero_with_mask: np.array_equal(result, golden)
    test_register_vd_equ_vs1_with_mask: np.array_equal(result, golden)
    test_register_vd_equ_vs2_with_mask: np.array_equal(result, golden)
    test_register_vs1_equ_vs2_with_mask: np.array_equal(result, golden)
    test_register_vd_equ_vs1_vs2_with_mask: np.array_equal(result, golden)
    

  basic_cases:
    test_basic_with_mask @ ori, vs1, vs2, sew, vl, lmul, vma, mask:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vma in ["ma", "mu"]:
                vs1 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
                vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
                ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew))
                mask= vector_mask_array_random(vl)
                params_yml.append([ori, vs1, vs2, sew, vl, lmul, vma, mask])


  random_cases:
    test_random_regression_with_mask @ ori, vs1, vs2, sew, vl, lmul, vstart, mask:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in [np.random.randint(1, vector_vlmax(lmul, sew, vlen)+1)]:
              for vstart in [np.random.randint(vl+2)]:
                vs1 = np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))
                vs2 = np.random.uniform(bits_to_intmin(sew), bits_to_intmax(sew), vl).astype(bits_to_dtype_int(sew))                
                ori = np.random.uniform(0, vl, vl).astype(bits_to_dtype_int(sew))
                mask= vector_mask_array_random(vl)
                params_yml.append([ori, vs1, vs2, sew, vl, lmul, vstart, mask])


  cases:
    test_agnostic_tu_with_mask @ ori, vs2, vs1, sew, lmul, lmul_tu, vl, mask, tail:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              tail= get_tailmax(lmul, sew, vlen)
              vs1 = np.linspace( 2, bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( 1, bits_to_intmax(sew), tail, dtype=bits_to_dtype_int(sew))
              ori = np.linspace( 0, tail, tail, dtype=bits_to_dtype_int(sew))
              mask= vector_mask_array_random(tail)
              lmul_tu = 1 if isinstance(lmul,str) else lmul
              params_yml.append([ori, vs2, vs1, sew, lmul, lmul_tu, vl, mask, tail])

    test_vstart_not_equal_zero_with_mask @ ori, vs1, vs2, sew, vl, lmul, vstart, mask:
      setup: |
        params_yml = []
        for sew in vector_sew_list(elen):
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vstart in [vl//3, sew//2]:
                vs1 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
                vs2 = np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
                ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew))
                mask= vector_mask_array_random(vl)
                params_yml.append([ori, vs1, vs2, sew, vl, lmul, vstart, mask])

    test_vl_equal_zero_with_mask:
      matrix: 
        sew : vector_sew_list(elen)
        lmul: vector_lmul_list(sew, elen)       
        vl  : 0
        leng: vector_vl_list(lmul, sew, vlen)
        vs1 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), leng, dtype=bits_to_dtype_uint(sew))
        vs2 : np.linspace( bits_to_intmin(sew), bits_to_intmax(sew), leng, dtype=bits_to_dtype_uint(sew))
        ori : np.linspace( 0, leng, leng, dtype=bits_to_dtype_int(sew))
        mask: vector_mask_array_random(leng)

    test_register_vd_equ_vs1_with_mask @ ori, vs2, vs1, sew, lmul, vl, mask:
      setup: |
        params_yml = []
        for sew in [8, 16]:
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              vs1 = np.linspace( 2, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( 1, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              ori = vs1
              mask= vector_mask_array_random(vl)
              params_yml.append([ori, vs2, vs1, sew, lmul, vl, mask])  

    test_register_vd_equ_vs2_with_mask @ ori, vs2, vs1, sew, lmul, vl, mask:
      setup: |
        params_yml = []
        for sew in [8, 32]:
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              vs1 = np.linspace( 2, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs2 = np.linspace( 1, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              ori = vs2
              mask= vector_mask_array_random(vl)
              params_yml.append([ori, vs2, vs1, sew, lmul, vl, mask]) 

    test_register_vd_equ_vs1_vs2_with_mask @ ori, vs2, vs1, sew, lmul, vl, mask:
      setup: |
        params_yml = []
        for sew in [8, elen]:
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              vs1 = np.linspace( 2, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs2 = vs1
              ori = vs1
              mask= vector_mask_array_random(vl)
              params_yml.append([ori, vs2, vs1, sew, lmul, vl, mask])               

    test_register_vs1_equ_vs2_with_mask @ ori, vs2, vs1, sew, lmul, vl, mask:
      setup: |
        params_yml = []
        for sew in [16, 32]:
          for lmul in vector_lmul_list(sew, elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              vs1 = np.linspace( 2, bits_to_intmax(sew), vl, dtype=bits_to_dtype_int(sew))
              vs2 = vs1
              ori = np.linspace( 0, vl, vl, dtype=bits_to_dtype_int(sew))
              mask= vector_mask_array_random(vl)
              params_yml.append([ori, vs2, vs1, sew, lmul, vl, mask])        

    test_exception_wrong_sew:
      matrix: 
        sew : [128, 512]
        lmul: [2, 8]        
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul:
      matrix: 
        sew : [16, 32, 64]
        lmul: vector_illegal_lmul(sew)
        vl  : vector_vl_list(lmul, sew, vlen)

    test_exception_wrong_lmul_vregNum @ sew, lmul, vl, vs1_name, vs2_name, vd_name:
      - [  8, 2, 50, "v1",  "v2",  "v4"  ]
      - [ 16, 2, 50, "v1",  "v2",  "v4"  ]
      - [ 32, 2, 35, "v6",  "v3",  "v8"  ]
      - [  8, 4, 30, "v3",  "v4",  "v30" ]
      - [ 16, 4, 77, "v12", "v16", "v22" ]
      - [ 32, 8, 55, "v26", "v8",  "v16" ]
      
vadc_vvm:
  <<: *default

vsbc_vvm:
  <<: *default

vmerge_vvm:
  <<: *default
