_: &default
  head: |
    #undef EXTRA_INIT
    #define EXTRA_INIT                               \
      /* Set up a PMP to permit all accesses */      \
      li t0, 0xd8000000;                             \
      srli t0, t0, 2;                                \
      csrw pmpaddr0, t0;                             \
      li t0, PMP_TOR | PMP_R | PMP_W | PMP_X;        \
      csrw pmpcfg0, t0; 
    #include "exception.h"
    #include "test_macros_v.h"
    #define ST_ADDR 0x90000000
    #define END_ADDR 0xC0000000
  env: RVTEST_RV64UV
  templates:
    # FIXME check m8 data
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_index_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection
    
    test_eew_gt_sew_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_eew_lt_sew_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_vstart_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data};
        la a2, {vs2_data};
        li a3, ST_ADDR;
        la a4, test_{num}_data;

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        li a5, {start};
        csrw vstart, a5;
        {name} v16, (a3), v8;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, {start}, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_tu_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        COPY_INDEX_SRC(ST_ADDR, END_ADDR, {origin_data}, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data
        la a5, {origin_data}

        li a6, VLEN*8/{sew};
        vsetvli t0, a6, e{sew},m8,ta,mu;
        vle{sew}.v v16, (a5);
        vse{sew}.v v16, (a4);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill (VLEN*8/{sew}), ({sew}/8), 0;
        .popsection
    # FIXME dst addr misalign
    test_misalign_without_mask: |
      test_{num}:
        li t0, CAUSE_MISALIGNED_STORE;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data};
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        addi a3, a3, {offset};
        {name} v16, (a3), v8;
        li a4, {isExcept}
        beqz a4, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        csrr a0, vstart;
        beqz a0, 22f;
        la a1, fail; 
        jalr x0, 0(a1);
      22:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);
      test_{num}_end:
        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection
    
    test_misalign_index_without_mask: |
      test_{num}:
        li t0, CAUSE_MISALIGNED_STORE;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data};
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8;
        li a4, {isExcept}
        beqz a4, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        csrr a0, vstart;
        beqz a0, 22f;
        la a1, fail; 
        jalr x0, 0(a1);
      22:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);
      test_{num}_end:
        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_vs3_eq_vs2_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data};
        la a2, {vs2_data};
        li a3, ST_ADDR;
        la a4, test_{num}_data;

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v8, (a3), v8;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data};
        la a2, {vs2_data};
        li a3, ST_ADDR;
        la a4, test_{num}_data;

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        li a5, {start};
        csrw vstart, a5;
        {name} v16, (a3), v8;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, {start}, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection


    test_basic_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data
        la a5, {mask_data}

        li a6, ({vl}+7)/8;
        vsetvli t0, a6, e8,m1,ta,mu;
        vle8.v v0, (a5);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8, v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection
    
    test_index_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data
        la a5, {mask_data}

        li a6, ({vl}+7)/8;
        vsetvli t0, a6, e8,m1,ta,mu;
        vle8.v v0, (a5);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8, v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_eew_gt_sew_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data
        la a5, {mask_data}

        li a6, ({vl}+7)/8;
        vsetvli t0, a6, e8,m1,ta,mu;
        vle8.v v0, (a5);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8, v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_eew_lt_sew_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data
        la a5, {mask_data}

        li a6, ({vl}+7)/8;
        vsetvli t0, a6, e8,m1,ta,mu;
        vle8.v v0, (a5);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8, v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_vstart_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data
        la a5, {mask_data}

        li a6, ({vl}+7)/8;
        vsetvli t0, a6, e8,m1,ta,mu;
        vle8.v v0, (a5);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a6, {start};
        csrw vstart, a6;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v8, v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, {start}, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_tu_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        COPY_INDEX_SRC(ST_ADDR, END_ADDR, {origin_data}, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        
        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        la a3, {mask_data}
        la a4, test_{num}_data
        la a5, {origin_data}

        li a6, ({vl}+7)/8
        vsetvli t0, a6, e{sew},m8,ta,mu;
        vle8.v v0, (a3);

        li a6, VLEN*8/{sew};
        vsetvli t0, a6, e{sew},m8,ta,mu;
        vle{sew}.v v16, (a5);
        vse{sew}.v v16, (a4);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{sew}.v v16, (a1);
        li a3, ST_ADDR;
        {name} v16, (a3), v8, v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill (VLEN*8/{sew}), ({sew}/8), 0;
        .popsection
    # FIXME dst addr misalign
    test_misalign_with_mask: |
      test_{num}:
        li t0, CAUSE_MISALIGNED_STORE;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data};
        la a2, {vs2_data}
        la a3, {mask_data};
        la a4, test_{num}_data

        li a6, ({vl}+7)/8
        vsetvli t0, a6, e{sew},m8,ta,mu;
        vle8.v v0, (a3);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        li a3, ST_ADDR;
        addi a3, a3, {offset};
        {name} v16, (a3), v8, v0.t;
        li a4, {isExcept}
        beqz a4, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        csrr a0, vstart;
        beqz a0, 22f;
        la a1, fail; 
        jalr x0, 0(a1);
      22:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);
      test_{num}_end:
        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection
    
    test_misalign_index_with_mask: |
      test_{num}:
        li t0, CAUSE_MISALIGNED_STORE;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data};
        la a2, {vs2_data}
        la a3, {mask_data};
        la a4, test_{num}_data

        li a6, ({vl}+7)/8
        vsetvli t0, a6, e{sew},m8,ta,mu;
        vle8.v v0, (a3);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        li a3, ST_ADDR;
        {name} v16, (a3), v8, v0.t;
        li a4, {isExcept}
        beqz a4, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        csrr a0, vstart;
        beqz a0, 22f;
        la a1, fail; 
        jalr x0, 0(a1);
      22:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);
      test_{num}_end:
        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_vs3_eq_vs2_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8
        
        li a0, {vl};
        la a1, {vs3_data};
        la a2, {vs2_data};
        la a3, {mask_data};
        la a4, test_{num}_data;

        li a6, ({vl}+7)/8
        vsetvli t0, a6, e{sew},m8,ta,mu;
        vle8.v v0, (a3);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        li a3, ST_ADDR;
        {name} v8, (a3), v8, v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_vs2_eq_v0_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data}
        la a2, {vs2_data}
        li a3, ST_ADDR;
        la a4, test_{num}_data
        la a5, {mask_data}

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v0, (a5);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        {name} v16, (a3), v0, v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, 0, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_regression_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        CLEAR_INDEX_MEM(ST_ADDR, END_ADDR, {vl}, {vs2_data}, {sew}/8, {eew}/8, {ldins_i}, 1)
        li a0, {vlen}*8/{eew}
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v16, v16, v16

        li a0, {vl};
        la a1, {vs3_data};
        la a2, {vs2_data};
        la a3, {mask_data};
        la a4, test_{num}_data;

        li a6, ({vl}+7)/8
        vsetvli t0, a6, e{sew},m8,ta,mu;
        vle8.v v0, (a3);

        vsetvli t0, a0, e{eew},m8,ta,mu;
        vle{eew}.v v8, (a2);

        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{sew}.v v16, (a1);
        li a5, {start};
        csrw vstart, a5;
        li a3, ST_ADDR;
        {name} v16, (a3), v8, v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        COPY_INDEX_DST(ST_ADDR, test_{num}_data, {vl}, {vs2_data}, {sew}/8, {eew}/8, {start}, {ldins_i}, 1);

        .pushsection .data,1;
        .balign ({sew}/8)
      test_{num}_data:
        .fill {vl}, ({sew}/8), 0;
        .popsection

    test_exception_vreg_misalign_with_lmul: |
      test_{num}:
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {vs3_data}
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        {name} v3, (a1), v2;
        la a1, fail; 
        jalr x0, 0(a1);
      test_{num}_end:

    test_exception_invalid_sew : |
      test_{num}:
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {vs3_data}
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        {name} v3, (a1), v2;
        la a1, fail; 
        jalr x0, 0(a1);
      test_{num}_end:

    test_exception_invalid_emul: |
      test_{num}:
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {vs3_data}
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        {name} v8, (a1), v16;
        la a1, fail; 
        jalr x0, 0(a1);
      test_{num}_end:

    test_exception_invalid_addr: |
      test_{num}:
        li t0, 7;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        li a1, {addr};
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        {name} v8, (a1), v16;
        la a1, fail; 
        jalr x0, 0(a1);
      test_{num}_end:
  

  rule: co_verification
  rule_params:
    test_basic_without_mask: np.array_equal(result, golden)
    test_index_without_mask: np.array_equal(result, golden)
    test_eew_gt_sew_without_mask: np.array_equal(result, golden)
    test_eew_lt_sew_without_mask: np.array_equal(result, golden)
    test_vstart_without_mask: np.array_equal(result, golden)
    test_tu_without_mask: np.array_equal(result, golden)
    test_misalign_without_mask: np.array_equal(result, golden)
    test_misalign_index_without_mask: np.array_equal(result, golden)
    test_vs3_eq_vs2_without_mask: np.array_equal(result, golden)
    test_regression_without_mask: np.array_equal(result, golden)
    test_basic_with_mask: np.array_equal(result, golden)
    test_index_with_mask: np.array_equal(result, golden)
    test_eew_gt_sew_with_mask: np.array_equal(result, golden)
    test_eew_lt_sew_with_mask: np.array_equal(result, golden)
    test_vstart_with_mask: np.array_equal(result, golden)
    test_tu_with_mask: np.array_equal(result, golden)
    test_misalign_with_mask: np.array_equal(result, golden)
    test_misalign_index_with_mask: np.array_equal(result, golden)
    test_vs3_eq_vs2_with_mask: np.array_equal(result, golden)
    test_vs2_eq_v0_with_mask: np.array_equal(result, golden)
    test_regression_with_mask: np.array_equal(result, golden)



_vsxxei8_v: &vsxxei8_v
  <<: *default
  basic_cases:
    test_basic_without_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_basic_with_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    

  random_cases:
    test_regression_without_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : vector_sew_list_random(elen)
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls_random(lmul, sew, eew, vlen)
        start: vector_vstart_list_random(vl)
        vs2 : np.random.uniform(0, 2**eew, vl).astype(bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.random.uniform(0, 2**sew, vl).astype(bits_to_dtype_uint(sew))

    test_regression_with_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : vector_sew_list_random(elen)
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls_random(lmul, sew, eew, vlen)
        start: vector_vstart_list_random(vl)
        mask: vector_mask_array_random(vl)
        vs2 : np.random.uniform(0, 2**eew, vl).astype(bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.random.uniform(0, 2**sew, vl).astype(bits_to_dtype_uint(sew))


  cases:    
    test_index_without_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    
    test_eew_lt_sew_without_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : [16, elen]
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    
    test_vstart_without_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        start: vector_vstart_list_linspace(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_tu_without_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        origin: np.random.uniform(0, 2**sew, int(vlen*8/sew)).astype(bits_to_dtype_uint(sew))
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vs3_eq_vs2_without_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)

    test_index_with_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    
    test_eew_lt_sew_with_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : [16, elen]
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vstart_with_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        start: vector_vstart_list_linspace(vl)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_tu_with_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        origin: np.random.uniform(0, 2**sew, int(vlen*8/sew)).astype(bits_to_dtype_uint(sew))
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vs3_eq_vs2_with_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)

    test_vs2_eq_v0_with_mask :
      matrix:
        vlen: vlen
        eew : 8
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs2 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_exception_vreg_misalign_with_lmul @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int16),  16,  1,    4, 1, 8, vlen])

    test_exception_invalid_sew @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int16), 128,  1,    1, 1, 8, vlen])
    
    test_exception_invalid_emul @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int32),  32,  1, "f8", 1, 8, vlen])

    test_exception_invalid_addr @ vs3, addr, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8), 0xd8300000,   8,   1,  1, 1, 8, vlen])


_vsxxei16_v: &vsxxei16_v
  <<: *default
  basic_cases:
    test_basic_without_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_basic_with_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    

  random_cases:
    test_regression_without_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : vector_sew_list_random(elen)
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls_random(lmul, sew, eew, vlen)
        start: vector_vstart_list_random(vl)
        vs2 : np.random.uniform(0, 2**eew, vl).astype(bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.random.uniform(0, 2**sew, vl).astype(bits_to_dtype_uint(sew))
 
    test_regression_with_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : vector_sew_list_random(elen)
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls_random(lmul, sew, eew, vlen)
        start: vector_vstart_list_random(vl)
        mask: vector_mask_array_random(vl)
        vs2 : np.random.uniform(0, 2**eew, vl).astype(bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.random.uniform(0, 2**sew, vl).astype(bits_to_dtype_uint(sew))


  cases:    
    test_index_without_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    
    test_eew_lt_sew_without_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : [elen]
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    
    test_eew_gt_sew_without_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vstart_without_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        start: vector_vstart_list_linspace(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_tu_without_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        origin: np.random.uniform(0, 2**sew, int(vlen*8/sew)).astype(bits_to_dtype_uint(sew))
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_misalign_without_mask :
      matrix:
        vlen: vlen
        isExcept: 1
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        offset: np.random.randint(1, int(sew/8))
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_misalign_index_without_mask :
      matrix:
        vlen: vlen
        isExcept: 1
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array_misaligned(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vs3_eq_vs2_without_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)

    test_index_with_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    
    test_eew_lt_sew_with_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : [elen]
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    
    test_eew_gt_sew_with_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 8
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vstart_with_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        start: vector_vstart_list_linspace(vl)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_tu_with_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        origin: np.random.uniform(0, 2**sew, int(vlen*8/sew)).astype(bits_to_dtype_uint(sew))
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_misalign_with_mask :
      matrix:
        vlen: vlen
        isExcept: 1
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        offset: np.random.randint(1, int(sew/8))
        mask: vector_mask_array_random(vl)*2+1
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_misalign_index_with_mask :
      matrix:
        vlen: vlen
        isExcept: 1
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)*4+3
        vs2 : vector_index_array_misaligned(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vs3_eq_vs2_with_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)

    test_vs2_eq_v0_with_mask :
      matrix:
        vlen: vlen
        eew : 16
        sew : 16
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs2 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_exception_vreg_misalign_with_lmul @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int16),  16,  1,    4, 1 , 16, vlen])

    test_exception_invalid_sew @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int16), 128,  1,    1, 1, 16, vlen])
    
    test_exception_invalid_emul @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8) ,   8,  1,    8, 1, 16, vlen])
        params_yml.append([np.array([1], dtype=np.int32),  32,  1, "f8", 1, 16, vlen])

    test_exception_invalid_addr @ vs3, addr, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8), 0xd8300000,   8,   1,  1, 1, 16, vlen])
        

_vsxxei32_v: &vsxxei32_v
  <<: *default
  basic_cases:
    test_basic_without_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_basic_with_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

  random_cases:
    test_regression_without_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : vector_sew_list_random(elen)
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls_random(lmul, sew, eew, vlen)
        start: vector_vstart_list_random(vl)
        vs2 : np.random.uniform(0, 2**20, vl).astype(bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.random.uniform(0, 2**sew, vl).astype(bits_to_dtype_uint(sew))

    test_regression_with_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : vector_sew_list_random(elen)
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls_random(lmul, sew, eew, vlen)
        start: vector_vstart_list_random(vl)
        mask: vector_mask_array_random(vl)
        vs2 : np.random.uniform(0, vl, vl).astype(bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.random.uniform(0, 2**sew, vl).astype(bits_to_dtype_uint(sew))


  cases:
    test_index_without_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    
    test_eew_lt_sew_without_mask @ vs3, vs2, vl, sew, eew, lmul, vlen, ldins_i:
      setup: |
        params_yml = []
        if 64 == elen:
          eew = 32
          vlen = vlen
          ldins_i = load_inst(eew)
          for sew in [64]:
            for lmul in vector_lmul_list((sew,eew), elen):
              for vl in vector_vl_list(lmul, sew, vlen):
                for vs2 in vector_index_array_consecutive(eew, sew, vl):
                  vs3  = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                  params_yml.append([vs3, vs2, vl, sew, eew, lmul, vlen, ldins_i])

    test_eew_gt_sew_without_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : [8, 16]
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vstart_without_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        start: vector_vstart_list_linspace(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_tu_without_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        origin: np.random.uniform(0, 2**sew, int(vlen*8/sew)).astype(bits_to_dtype_uint(sew))
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_misalign_without_mask :
      matrix:
        vlen: vlen
        isExcept: 1
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        offset: np.random.randint(1, int(sew/8))
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_misalign_index_without_mask :
      matrix:
        vlen: vlen
        isExcept: 1
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : vector_index_array_misaligned(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vs3_eq_vs2_without_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        vs2 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
    
    test_index_with_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
    
    test_eew_lt_sew_with_mask @ vs3, vs2, vl, sew, eew, lmul, vlen, ldins_i, mask:
      setup: |
        params_yml = []
        if 64 == elen:
          eew  = 32
          vlen = vlen
          ldins_i = load_inst(eew)
          for sew in [64]:
            for lmul in vector_lmul_list((sew,eew), elen):
              for vl in vector_vl_list(lmul, sew, vlen):
                for vs2 in vector_index_array_consecutive(eew, sew, vl): #note
                  vs3  = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                  mask = vector_mask_array_random(vl)
                  params_yml.append([vs3, vs2, vl, sew, eew, lmul, vlen, ldins_i, mask])

    test_eew_gt_sew_with_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : [8, 16]
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vstart_with_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        start: vector_vstart_list_linspace(vl)
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_tu_with_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        origin: np.random.uniform(0, 2**sew, int(vlen*8/sew)).astype(bits_to_dtype_uint(sew))
        mask: vector_mask_array_random(vl)
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_misalign_with_mask :
      matrix:
        vlen: vlen
        isExcept: 1
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        offset: np.random.randint(1, int(sew/8))
        mask: vector_mask_array_random(vl)*2+1
        vs2 : vector_index_array_consecutive(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_misalign_index_with_mask :
      matrix:
        vlen: vlen
        isExcept: 1
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)*4+3
        vs2 : vector_index_array_misaligned(eew, sew, vl)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    test_vs3_eq_vs2_with_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: vector_mask_array_random(vl)
        vs2 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)

    test_vs2_eq_v0_with_mask :
      matrix:
        vlen: vlen
        eew : 32
        sew : 32
        ldins_i: load_inst(eew)
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list(lmul, sew, vlen)
        mask: np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs2 : np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
        vs3 : np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))

    # FIXME split misalign lmul and sew > 128
    test_exception_vreg_misalign_with_lmul @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int16),  16,  1,    4, 1, 32, vlen])
        
    test_exception_invalid_sew @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int16), 128,  1,    1, 1, 32, vlen])
    
    test_exception_invalid_emul @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8) ,   8,  1,    8, 1, 32, vlen])
        params_yml.append([np.array([1], dtype=np.int32),  32,  1, "f8", 1, 32, vlen])

    test_exception_invalid_addr @ vs3, addr, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8), 0xd8300000,   8,   1,  1, 1, 32, vlen])


_vsxxei64_v: &vsxxei64_v
  <<: *default
  basic_cases:
    test_basic_without_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vs2 in vector_index_array_consecutive(eew, sew, vl): 
                vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i])

    test_basic_with_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, mask:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vs2 in vector_index_array_consecutive(eew, sew, vl): 
                vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                mask= vector_mask_array_random(vl)
                params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, mask])
        

  random_cases:       
    test_regression_with_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, start, mask:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list_ls_random(lmul, sew, eew, vlen):
              for vs2 in vector_index_array_consecutive(eew, sew, vl):
                for start in vector_vstart_list_linspace(vl):
                  vs3 = np.random.uniform(0, 2**sew, vl).astype(bits_to_dtype_uint(sew))
                  mask= vector_mask_array_random(vl)
                  params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, start, mask])

  cases:
    test_index_without_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              vs2 = vector_index_array(eew, sew, vl)
              vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
              params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i])

    test_eew_gt_sew_without_mask @ vs3, vs2, vl, sew, eew, lmul, vlen, ldins_i:
      setup: |
        params_yml = []
        if 64 == elen:
          eew  = 64
          vlen = vlen
          ldins_i = load_inst(eew)
          for sew in [8, 16, 32]:
            for lmul in vector_lmul_list((sew,eew), elen):
              for vl in vector_vl_list(lmul, sew, vlen):
                for vs2 in vector_index_array_consecutive(eew, sew, vl): 
                  vs3  = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))             
                  params_yml.append([vs3, vs2, vl, sew, eew, lmul, vlen, ldins_i])

    test_vstart_without_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, start:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vs2 in vector_index_array_consecutive(eew, sew, vl): 
                for start in vector_vstart_list_linspace(vl):
                  vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                  params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, start])

    test_tu_without_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, origin:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vs2 in vector_index_array_consecutive(eew, sew, vl): 
                vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                origin = np.random.uniform(0, 2**sew, int(vlen*8/sew)).astype(bits_to_dtype_uint(sew))
                params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, origin])

    test_misalign_without_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, offset, isExcept:
      setup: |
        if 64 == elen:
          params_yml = []
          isExcept = 1
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          offset  = np.random.randint(1, int(sew/8))
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vs2 in vector_index_array_consecutive(eew, sew, vl): 
                vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                start = vector_vstart_list_linspace(vl)
                params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, offset, isExcept])              

    test_misalign_index_without_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, isExcept:
      setup: |
        if 64 == elen:
          params_yml = []
          isExcept = 1
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              vs2 = vector_index_array_misaligned(eew, sew, vl)
              vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
              params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, isExcept])

    test_vs3_eq_vs2_without_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              vs2 = np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
              vs3 = np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
              params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i])              

    test_index_with_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, mask:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              mask= vector_mask_array_random(vl)
              vs2 = vector_index_array(eew, sew, vl)
              vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
              params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, mask])

    test_eew_gt_sew_with_mask @ vs3, vs2, vl, sew, eew, lmul, vlen, ldins_i, mask:
      setup: |
        params_yml = []
        if 64 == elen:
          eew  = 64
          vlen = vlen
          ldins_i = load_inst(eew)
          for sew in [8, 16, 32]:
            for lmul in vector_lmul_list((sew,eew), elen):
              for vl in vector_vl_list(lmul, sew, vlen):
                for vs2 in vector_index_array_consecutive(eew, sew, vl):
                  vs3  = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                  mask = vector_mask_array_random(vl)
                  params_yml.append([vs3, vs2, vl, sew, eew, lmul, vlen, ldins_i, mask])

    test_vstart_with_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, start, mask:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vs2 in vector_index_array_consecutive(eew, sew, vl): 
                for start in vector_vstart_list_linspace(vl):
                  mask = vector_mask_array_random(vl)
                  vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                  params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, start, mask])

    test_tu_with_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, origin, mask:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):
              for vs2 in vector_index_array_consecutive(eew, sew, vl): 
                mask = vector_mask_array_random(vl)
                vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                origin = np.random.uniform(0, 2**sew, int(vlen*8/sew)).astype(bits_to_dtype_uint(sew))
                params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, origin, mask])

    test_misalign_with_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, offset, isExcept, mask:
      setup: |
        if 64 == elen:
          params_yml = []
          isExcept = 1
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          offset = np.random.randint(1, int(sew/8))
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen): 
              for vs2 in vector_index_array_consecutive(eew, sew, vl):         
                mask = vector_mask_array_random(vl)*2+1
                vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
                params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, offset, isExcept, mask])              

    test_misalign_index_with_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, isExcept, mask:
      setup: |
        if 64 == elen:
          params_yml = []
          isExcept = 1
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):         
              mask= vector_mask_array_random(vl)*4+3
              vs2 = vector_index_array_misaligned(eew, sew, vl)
              vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
              params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, isExcept, mask])   

    test_vs3_eq_vs2_with_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, mask:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):         
              mask = vector_mask_array_random(vl)
              vs2 = np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
              vs3 = np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
              params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, mask])   

    test_vs2_eq_v0_with_mask @ vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, mask:
      setup: |
        if 64 == elen:
          params_yml = []
          vlen = vlen
          eew  = 64
          sew  = 64
          ldins_i = load_inst(eew)
          for lmul in vector_lmul_list((sew,eew), elen):
            for vl in vector_vl_list(lmul, sew, vlen):         
              mask= np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
              vs2 = np.linspace(0, vl-1, vl, dtype=bits_to_dtype_uint(eew))*(sew//8)
              vs3 = np.linspace(0, 2**sew, vl, dtype=bits_to_dtype_uint(sew))
              params_yml.append([vlen, vs2, vs3, vl, sew, eew, lmul, ldins_i, mask])   

    # FIXME: index vs2 can be delete
    test_exception_vreg_misalign_with_lmul @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int16),  16,  1,    4, 1, 64, vlen])

    test_exception_invalid_sew @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int16), 128,  1,    1, 1, 16, vlen])
    
    test_exception_invalid_emul @ vs3, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8) ,   8,  1,    8, 1, 64, vlen])

    test_exception_invalid_addr @ vs3, addr, sew, vl, lmul, isExcept, eew, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8), 0xd8300000,   8,   1,  1, 1, 64, vlen])
     

vsuxei8_v:
  <<: *vsxxei8_v

vsoxei8_v:
  <<: *vsxxei8_v

vsuxei16_v:
  <<: *vsxxei16_v

vsoxei16_v:
  <<: *vsxxei16_v

vsuxei32_v:
  <<: *vsxxei32_v

vsoxei32_v:
  <<: *vsxxei32_v

vsuxei64_v:
  <<: *vsxxei64_v

vsoxei64_v:
  <<: *vsxxei64_v
  