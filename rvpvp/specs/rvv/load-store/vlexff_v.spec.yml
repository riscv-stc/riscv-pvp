_: &default
  env: RVTEST_RV64UV
  head: |
    #define TOP_ADDR 0xd8000000
    #undef EXTRA_INIT
    #define EXTRA_INIT                               \
      /* Set up a PMP to permit all accesses */      \
      li t0, TOP_ADDR;                               \
      srli t0, t0, 2;                                \
      csrw pmpaddr0, t0;                             \
      li t0, PMP_TOR | PMP_R | PMP_W | PMP_X;        \
      csrw pmpcfg0, t0;                               
    #include "exception.h"
    #include "test_macros_v.h"

  templates:
    # FIXME repalce vse store of whole store
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        
        li a0, {vlen}*8/{eew};
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1);
        
        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        vs8r.v v8, (a3);
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_eew_neq_sew_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        
        li a0, {vlen}*8/{eew};
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1);
        
        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        vs8r.v v8, (a3);
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_vstart_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        la a1, {rs1_data};
        la a3, test_{num}_data;
        
        li a0, {vlen}*8/{eew};
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        vle{eew}ff.v v8, (a1);
        
        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        vs8r.v v8, (a3);
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection
    
    test_tu_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a2, {origin_data};
        la a3, test_{num}_data;

        vl8re{eew}.v v8, (a2)

        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{eew}ff.v v8, (a1);

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        vs8r.v v8, (a3);
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_misalign_without_mask: |
      test_{num}:
        li t0, CAUSE_MISALIGNED_LOAD;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        la a1, {rs1_data};
        addi a1, a1, {offset};
        la a3, test_{num}_data;

        li a0, {vlen}*8/{eew};
        vsetvli t0, a0, e{eew},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;

        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1);
        li a4, {isExcept}
        beqz a4, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        csrr a0, vstart;
        beqz a0, 22f;
        la a1, fail; 
        jalr x0, 0(a1);
      22:
        vs8r.v v8, (a3);
      test_{num}_end:
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection
      

    test_regression_without_mask: |
      test_{num}:
        li TESTNUM, {num};
        la a1, {rs1_data};
        la a3, test_{num}_data;

        li a0, {vlen} * 8 / {eew};
        vsetvli t0, a0, e{eew}, m8, ta, mu;
        vsub.vv v8, v8, v8;

        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        vle{eew}ff.v v8, (a1);

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        vs8r.v v8, (a3);
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew}/8), 0;
        .popsection

    test_basic_with_mask: |
     test_{num}:
        li TESTNUM, {num};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,ta,mu;
        vle8.v v0, (a4);

        li a0, {vlen}*8/{eew};
        vsetvli t1, a0, e{eew},m8,ta,mu;
        vsub.vv v8, v8, v8

        li a0, {vl};
        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1), v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        vs8r.v v8, (a3);
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_eew_neq_sew_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,ta,mu;
        vle8.v v0, (a4);

        li a0, {vlen}*8/{eew};
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        li a0, {vl};
        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1), v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        vs8r.v v8, (a3);
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_vstart_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,ta,mu;
        vle8.v v0, (a4);

        li a0, {vlen}*8/{eew};
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        li a0, {vl};
        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        vle{eew}ff.v v8, (a1), v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        vs8r.v v8, (a3);
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_tu_with_mask: |
      test_{num}:
        li TESTNUM, {num};
        li a0, {vl};
        la a1, {rs1_data};
        la a4, {mask_data};
        la a2, {origin_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,ta,mu;
        vle8.v v0, (a4);

        vl8re{eew}.v v8, (a2)

        vsetvli t1, a0, e{sew},m{lmul},tu,mu;
        vle{eew}ff.v v8, (a1), v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        vs8r.v v8, (a3);
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_misalign_with_mask: |
      test_{num}:
        li t0, CAUSE_MISALIGNED_LOAD;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);

        li TESTNUM, {num};
        la a1, {rs1_data};
        addi a1, a1, {offset};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,ta,mu;
        vle8.v v0, (a4);

        li a0, {vlen}*8/{eew};
        vsetvli t1, a0, e{eew},m{lmul},ta,mu;
        vsub.vv v8, v8, v8;

        li a0, {vl};
        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        vle{eew}ff.v v8, (a1), v0.t;
        li a4, {isExcept}
        beqz a4, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        csrr a0, vstart;
        beqz a0, 22f;
        la a1, fail; 
        jalr x0, 0(a1);
      22:
        vs8r.v v8, (a3);
      test_{num}_end:
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection
    
    test_regression_with_mask: |
      test_{num}:
        li TESTNUM, {num};

        la a1, {rs1_data};
        la a4, {mask_data};
        la a3, test_{num}_data;

        li t3, ({vl}+7)/8;
        vsetvli t0, t3, e8,m1,ta,mu;
        vle8.v v0, (a4);

        li a0, {vlen}*8/{eew};
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        li a0, {vl};
        vsetvli t1, a0, e{sew},m{lmul},ta,mu;
        li a2, {start};
        csrw vstart, a2;
        vle{eew}ff.v v8, (a1), v0.t;

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        vs8r.v v8, (a3);
        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection
    # FIXME chang name misalign vreg by lmul
    test_exception_vreg_misalign_with_lmul: |
      test_{num}:
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {rs1_data}
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{eew}ff.v v3, (a1);
        la a1, fail; 
        jalr x0, 0(a1);
      test_{num}_end:

    test_exception_invalid_sew : |
      test_{num}:
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {rs1_data}
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{eew}ff.v v3, (a1);
        la a1, fail; 
        jalr x0, 0(a1);
      test_{num}_end:

    # FIXME: change name: test_exception_invalid_emul
    test_exception_invalid_emul: |
      test_{num}:
        li t0, CAUSE_ILLEGAL_INSTRUCTION;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        la a1, {rs1_data}
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{eew}ff.v v8, (a1);
        la a1, fail; 
        jalr x0, 0(a1);
      test_{num}_end:

    test_exception_Fault_First: |
      test_{num}:
        li t0, CAUSE_LOAD_ACCESS;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};

        li a0, {vl};
        li a1, {addr};
        vsetvli t0, a0, e{sew},m{lmul},tu,mu;
        vle{eew}ff.v v8, (a1);
        la a1, fail; 
        jalr x0, 0(a1);
      test_{num}_end:
      
    test_exception_Fault_Not_First: |
      test_{num}:
        li TESTNUM, {num};

        la a0, {rs1_data}
        li a1, TOP_ADDR - {nvl}*{eew}/8
        li a2, {nvl}*{eew}/8
      11:
        lb a3, (a0)
        sb a3, (a1)
        addi a0, a0, 1
        addi a1, a1, 1
        addi a2, a2, -1
        bnez a2, 11b;

        la a1, {rs1_data};
        la a3, test_{num}_data;
        
        li a0, {vlen}*8/{eew};
        vsetvli t0, a0, e{eew},m8,ta,mu
        vsub.vv v8, v8, v8;

        li a0, {vl};
        vsetvli t0, a0, e{sew},m{lmul},ta,mu;
        li a1, TOP_ADDR - {nvl}*{eew}/8
        vle{eew}ff.v v8, (a1);
        csrr a2, vl;
        li a3, {nvl};
        beq a2, a3, 22f;
        la a1, fail; 
        jalr x0, 0(a1);
      22:
        la a1, test_{num}_data;
        vs8r.v v8, (a1);

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({vlen}*8/{eew}), ({eew} / 8), 0;
        .popsection


  rule: co_verification
  rule_params:
    test_basic_without_mask: np.array_equal(result, golden)
    test_eew_neq_sew_without_mask: np.array_equal(result, golden)
    test_vstart_without_mask: np.array_equal(result, golden)
    test_tu_without_mask: np.array_equal(result, golden)
    test_misalign_without_mask: np.array_equal(result, golden)
    test_regression_without_mask: np.array_equal(result, golden)
    test_basic_with_mask: np.array_equal(result, golden)
    test_eew_neq_sew_with_mask: np.array_equal(result, golden)
    test_vstart_with_mask: np.array_equal(result, golden)
    test_tu_with_mask: np.array_equal(result, golden)
    test_misalign_with_mask: np.array_equal(result, golden)
    test_regression_with_mask: np.array_equal(result, golden)
    test_exception_Fault_Not_First: np.array_equal(result, golden)


vlexff_v:
  <<: *default
  basic_cases:
    test_basic_without_mask:
      matrix:
        eew : vector_sew_list(elen)
        sew : eew
        vlen: vlen 
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
        rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_basic_with_mask:
      matrix:
        eew : 8
        sew : 8
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
        mask: vector_mask_array_random(vl)
        rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))


  random_cases:
    test_regression_without_mask:
      matrix:
        matrix:
        eew : vector_sew_list(elen)
        sew : vector_sew_list_random(elen)
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls_random(lmul, sew, eew, vlen)
        start: vector_vstart_list_random(vl)
        rs1 : np.random.uniform(0, 2**eew, vl).astype(bits_to_dtype_uint(eew))

    test_regression_with_mask:
      matrix:
        matrix:
        eew : vector_sew_list(elen)
        sew : vector_sew_list_random(elen)
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls_random(lmul, sew, eew, vlen)
        start: vector_vstart_list_random(vl)
        mask: vector_mask_array_random(vl)
        rs1 : np.random.uniform(0, 2**eew, vl).astype(bits_to_dtype_uint(eew))


  cases:
    test_eew_neq_sew_without_mask:
      matrix:
        eew : vector_sew_list(elen)
        sew : vector_sew_list_neq_eew(eew)
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
        rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_vstart_without_mask:
      matrix:
        eew : vector_sew_list(elen)
        sew : eew
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
        start: vector_vstart_list_linspace(vl)
        rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_tu_without_mask:
      matrix:
        eew : vector_sew_list(elen)
        sew : eew
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
        origin: np.random.uniform(0, 2**eew, int(vlen*8/eew)).astype(bits_to_dtype_uint(eew))
        rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_misalign_without_mask:
      matrix:
        isExcept: 1
        eew : [16, elen]
        sew : eew
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
        offset: np.random.randint(1, int(eew/8))
        rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_eew_neq_sew_with_mask:
      matrix:
        eew : vector_sew_list(elen)
        sew : vector_sew_list_neq_eew(eew)
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
        mask: vector_mask_array_random(vl)
        rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_vstart_with_mask:
      matrix:
        eew : vector_sew_list(elen)
        sew : eew
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
        start: vector_vstart_list_linspace(vl)
        mask: vector_mask_array_random(vl)
        rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_tu_with_mask:
      matrix:
        eew : vector_sew_list(elen)
        sew : eew
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
        origin: np.random.uniform(0, 2**eew, int(vlen*8/eew)).astype(bits_to_dtype_uint(eew))
        mask: vector_mask_array_random(vl)
        rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_misalign_with_mask:
      matrix:
        isExcept: 1
        eew : [16, elen]
        sew : eew
        vlen: vlen
        lmul: vector_lmul_list((sew,eew), elen)
        vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
        offset: np.random.randint(1, int(eew/8))
        mask: vector_mask_array_random(vl)*2+1
        rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))

    test_exception_vreg_misalign_with_lmul @ rs1, sew, eew, vl, lmul, isExcept, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8),    8,  8,    1,    4, 1, vlen])

    test_exception_invalid_sew @ rs1, sew, eew, vl, lmul, isExcept, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8),  128,  8,    1,    1, 1, vlen])
    
    test_exception_invalid_emul @ rs1, sew, eew, vl, lmul, isExcept, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8),   32,  8,    1, "f4", 1, vlen])  
        params_yml.append([np.array([1], dtype=np.int32),   8, 32,    1,    4, 1, vlen])

    test_exception_Fault_First @ rs1, addr, sew, eew, vl, lmul, isExcept, vlen:
      setup: |
        params_yml = []
        params_yml.append([np.array([1], dtype=np.int8), 0xd8300000,   8,  8,    1,  1, 1, vlen])  

    # test_exception_Fault_Not_First: #FIXME: elen=32,fail
    #   matrix:
    #     eew : vector_sew_list(elen)
    #     sew : eew
    #     vlen: vlen
    #     lmul: vector_lmul_list((sew,eew), elen)
    #     vl  : vector_vl_list_ls(lmul, sew, eew, vlen)
    #     nvl : list(np.unique(np.random.uniform(1, vl, 5).astype(int)))
    #     rs1 : np.linspace(0, 2**eew, vl, dtype=bits_to_dtype_uint(eew))
        