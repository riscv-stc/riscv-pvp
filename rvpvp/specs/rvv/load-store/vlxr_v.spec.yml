_: &default
  head: |
    #undef EXTRA_INIT
    #define EXTRA_INIT                               \
      /* Set up a PMP to permit all accesses */      \
      li t0, 0xd8000000;                             \
      srli t0, t0, 2;                                \
      csrw pmpaddr0, t0;                             \
      li t0, PMP_TOR | PMP_R | PMP_W | PMP_X;        \
      csrw pmpcfg0, t0; 
    #include "exception.h"
  env: RVTEST_RV64UV
  templates:
    test_basic_without_mask: |
      test_{num}:
        li TESTNUM, {num}

        li a0, {vlen}*8/{eew};
        vsetvli a1, a0, e{eew},m8,tu,mu;
        vsub.vv v8, v8, v8

        la a0, {rs1_data};
        vl{nf}re{eew}.v v8, (a0);
        
        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        li a0, {vlen}*8/{eew};
        vsetvli a1, a0, e{eew},m8,tu,mu;
        la a1, test_{num}_data;
        vse{eew}.v v8, (a1);

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill ({vlen}/8*{eew}), ({eew}/8), 0;
        .popsection

    test_vstart_without_mask: |
      test_{num}:
        li TESTNUM, {num}

        li a0, {vlen}*8/{eew};
        vsetvli a1, a0, e{eew},m8,tu,mu;
        vsub.vv v8, v8, v8

        la a0, {rs1_data};
        li a1, {start}
        csrw vstart, a1
        vl{nf}re{eew}.v v8, (a0);

        csrr a0, vstart;
        beqz a0, 11f;
        la a1, fail; 
        jalr x0, 0(a1);
      11:
        li a0, {vlen}*8/{eew};
        vsetvli a1, a0, e{eew},m8,tu,mu;
        la a1, test_{num}_data;
        vse{eew}.v v8, (a1);

        .pushsection .data, 1;
        .balign ({eew}/8)
      test_{num}_data:
        .fill ({vlen}/8*{eew}), ({eew}/8), 0;
        .popsection
    # FIXME add misalign case
    test_exception_misalign_addr: |
      test_{num}:
        li t0, CAUSE_MISALIGNED_LOAD;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};
       
        li a0, 1;
        li a1, {addr}
        vsetvli t0, a0, e{eew},m8,tu,mu;
        vl{nf}re{eew}.v v8, (a1);
        la a1, fail; 
        jalr x0, 0(a1);
      test_{num}_end:

    test_exception_invalid_addr: |
      test_{num}:
        li t0, CAUSE_LOAD_ACCESS;
        la t1, _expected_cause;
        sw t0, 0(t1);
        la t0, test_{num}_end;
        la t1, _restore_addr;
        sd t0, 0(t1);
        li TESTNUM, {num};
       
        li a0, 1;
        li a1, {addr}
        vsetvli t0, a0, e{eew},m8,tu,mu;
        vl{nf}re{eew}.v v8, (a1);
        la a1, fail; 
        jalr x0, 0(a1);
      test_{num}_end:
 
  rule: co_verification
  rule_params:
    test_basic_without_mask: np.array_equal(result, golden)
    test_vstart_without_mask: np.array_equal(result, golden)


vlxrx_v:
  <<: *default
  basic_cases:
    test_basic_without_mask:
      matrix:
        eew : vector_sew_list(elen)
        nf  : [1, 2, 4, 8]
        vlen: vlen
        rs1 : np.linspace(0, 2**eew, vlen*8//eew, dtype=bits_to_dtype_uint(eew))


  random_cases:
    test_basic_without_mask:
      matrix:
        eew : vector_sew_list(elen)
        nf  : [1, 2, 4, 8]
        vlen: vlen
        rs1 : np.linspace(0, 2**eew, vlen*8//eew, dtype=bits_to_dtype_uint(eew))


  cases:
    test_vstart_without_mask:
      matrix:
        eew : vector_sew_list(elen)
        nf  : [1, 2, 4, 8]
        vlen: vlen
        start: list(np.random.uniform(0, vlen*8//8, 10).astype(np.int32))
        rs1 : np.linspace(0, 2**eew, vlen*8//eew, dtype=bits_to_dtype_uint(eew))
    
    test_exception_invalid_addr @ rs1, addr, eew, nf, vlen:
      - '[np.linspace(0, 255, 256, dtype=np.uint8), 0xd8300000, 16, 2, vlen]'

    test_exception_misalign_addr @ rs1, addr, eew, nf, vlen:
      - '[np.linspace(0, 255, 256, dtype=np.uint8), 0xc0000001, 16, 2, vlen]'
      


